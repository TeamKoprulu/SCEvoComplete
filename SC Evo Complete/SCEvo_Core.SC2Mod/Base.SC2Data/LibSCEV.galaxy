include "TriggerLibs/NativeLib"

include "LibSCEV_h"

//--------------------------------------------------------------------------------------------------
// Library: SCEvo
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libSCEV_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libSCEV_InitVariables_completed = false;

void libSCEV_InitVariables () {
    int init_i;
    int init_j;

    if (libSCEV_InitVariables_completed) {
        return;
    }

    libSCEV_InitVariables_completed = true;

    libSCEV_gv_mineralWallsGlobalMineralWalls = UnitGroupEmpty();
    libSCEV_gv_mineralWallsTimer = TimerCreate();
    libSCEV_gv_fractionalArmorFilter = UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libSCEV_gv_missChanceRevealTimer = TimerCreate();
    libSCEV_gv_missChanceTrigger = libSCEV_gt_MissChanceHighGroundRegionEnter;
    for (init_i = 0; init_i <= libSCEV_gv_mAX_PLAYERS; init_i += 1) {
        for (init_j = 0; init_j <= libSCEV_gv_mAX_PLAYERS; init_j += 1) {
            libSCEV_gv_minimapAllyViewPings[init_i][init_j] = c_invalidPingId;
        }
    }
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Functions
//--------------------------------------------------------------------------------------------------
static void DbgInternal(string message) {
    TriggerDebugOutput(10, StringToText(message), true);
    return;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Main
//--------------------------------------------------------------------------------------------------
include "Script/SCBW"
void SCBW_main(){
    SCBW_Init();
}

void libSCEV_InitCustomScript () {
    SCBW_main();
}

// Presets
string libSCEV_ge_LegacyCheat_Ident (int lp_val) {
         if (lp_val == 1) { return "InstantBuild"; }
    return null;
}

// Functions
trigger auto_libSCEV_gf_LegacyExtensionInit_Trigger = null;

void libSCEV_gf_LegacyExtensionInit () {
    if (auto_libSCEV_gf_LegacyExtensionInit_Trigger == null) {
        auto_libSCEV_gf_LegacyExtensionInit_Trigger = TriggerCreate("auto_libSCEV_gf_LegacyExtensionInit_TriggerFunc");
    }

    TriggerExecute(auto_libSCEV_gf_LegacyExtensionInit_Trigger, false, false);
}

bool auto_libSCEV_gf_LegacyExtensionInit_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    string lv_unitType;

    // Automatic Variable Declarations
    playergroup auto832AD1A3_g;
    playergroup auto89A9A6E2_g;
    int autoB0CAAF79_catalog;
    int autoB0CAAF79_i;

    // Variable Initialization

    // Implementation
    TriggerSendEvent("EventsInit");
    auto832AD1A3_g = PlayerGroupAll();
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto832AD1A3_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        libSCEV_gf_SetPlayerRaceToBW(lv_playerIndex);
        if ((PlayerType(lv_playerIndex) == c_playerTypeUser)) {
            libNtve_gf_HideGameUI(false, PlayerGroupSingle(lv_playerIndex));
            libNtve_gf_HideGameUI(true, PlayerGroupSingle(lv_playerIndex));
        }

    }
    libSCEV_gf_LegacyRandomizeColors();
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    auto89A9A6E2_g = PlayerGroupActive();
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto89A9A6E2_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        autoB0CAAF79_catalog = c_gameCatalogUnit;
        autoB0CAAF79_i = 1;
        for ( ; autoB0CAAF79_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoB0CAAF79_i += 1 ) {
            lv_unitType = CatalogEntryGet(autoB0CAAF79_catalog, autoB0CAAF79_i);
            if ((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Race", c_playerAny) != "BWTe") && (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Race", c_playerAny) != "BWZe") && (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Race", c_playerAny) != "BWPr")) {
                TechTreeUnitHelp(lv_playerIndex, lv_unitType, false);
            }

        }
    }
    libSCEV_gf_SCEvoActivateFeature(libSCEV_ge_SCEvoFeatures_LegacyUnitSwap, true);
    if ((libSCEV_gf_IsBWMap() == false)) {
        libSCEV_gf_LegacyRemoveExtraGeysers();
    }
    else {
        libSCEV_gf_LegacyUpdateResources();
    }
    Wait(0.0625, c_timeGame);
    if ((libSCEV_gf_IsBWMap() == false)) {
        libSCEV_gf_LegacyIncreaseResources();
    }
    else {
        libSCEV_gf_LegacyUpdateResources();
    }
    return true;
}

void libSCEV_gf_LegacySetFoWState (int lp_hidden, playergroup lp_players) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto2C453286_g;

    // Variable Initialization

    // Implementation
    auto2C453286_g = lp_players;
    lv_index = -1;
    while (true) {
        lv_index = PlayerGroupNextPlayer(auto2C453286_g, lv_index);
        if (lv_index < 0) { break; }
        VisFillArea(lv_index, RegionEntireMap(), lp_hidden, false);
    }
}

void libSCEV_gf_LegacyIncreaseResources () {
    // Variable Declarations
    const int lv_resourceCapMax = 2000;
    const int lv_resourceCapMin = 450;
    fixed lv_currResource;
    const int lv_mineralsLegacy = 1700;
    const int lv_vespeneLegacy = 5000;
    string lv_replaceLink;

    // Automatic Variable Declarations
    unitgroup auto3899E478_g;
    int auto3899E478_u;
    unit auto3899E478_var;

    // Variable Initialization

    // Implementation
    auto3899E478_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3899E478_u = UnitGroupCount(auto3899E478_g, c_unitCountAll);
    for (;; auto3899E478_u -= 1) {
        auto3899E478_var = UnitGroupUnitFromEnd(auto3899E478_g, auto3899E478_u);
        if (auto3899E478_var == null) { break; }
        if ((libSCEV_gf_UnitIsMineral(auto3899E478_var) == false) && (libSCEV_gf_UnitIsVespene(auto3899E478_var) == false)) {
            continue;
        }

        lv_currResource = libNtve_gf_UnitGetPropertyResources(auto3899E478_var, c_unitPropCurrent);
        if ((libSCEV_gf_UnitIsMineralSmall(auto3899E478_var) == true) && (lv_currResource < lv_resourceCapMax) && (lv_currResource > lv_resourceCapMin)) {
            lv_replaceLink = libSCEV_gf_GetSmallMineralReplaceLink(auto3899E478_var);
            if ((lv_replaceLink != null)) {
                libNtve_gf_ReplaceUnit(auto3899E478_var, lv_replaceLink, libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
                UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropResources, lv_mineralsLegacy);
            }

        }
        else if ((libSCEV_gf_UnitIsMineral(auto3899E478_var) == true) && (lv_currResource < lv_resourceCapMax) && (lv_currResource > lv_resourceCapMin)) {
            UnitSetPropertyFixed(auto3899E478_var, c_unitPropResources, lv_mineralsLegacy);
        }
        else if ((libSCEV_gf_UnitIsVespene(auto3899E478_var) == true) && (lv_currResource < lv_vespeneLegacy)) {
            UnitSetPropertyFixed(auto3899E478_var, c_unitPropResources, lv_vespeneLegacy);
        }
    }
}

void libSCEV_gf_LegacyUpdateResources () {
    // Variable Declarations
    string lv_indexInstance;
    int lv_amount;
    region lv_region;
    int lv_index;
    int lv_richMinValueTemp;

    // Automatic Variable Declarations
    string auto28BC1F2E_userType;
    int auto28BC1F2E_i;
    unitgroup auto42EBD5E6_g;
    int auto42EBD5E6_u;
    unit auto42EBD5E6_var;
    unitgroup auto36E6A9AE_g;
    int auto36E6A9AE_u;
    unit auto36E6A9AE_var;
    unitgroup auto5FC2BA69_g;
    int auto5FC2BA69_u;
    unit auto5FC2BA69_var;
    string autoC6DA8D21_userType;
    int autoC6DA8D21_i;
    unitgroup auto451AA38A_g;
    int auto451AA38A_u;
    unit auto451AA38A_var;
    unitgroup autoE38DAE4E_g;
    int autoE38DAE4E_u;
    unit autoE38DAE4E_var;
    unitgroup autoA7F10B08_g;
    int autoA7F10B08_u;
    unit autoA7F10B08_var;
    unitgroup autoC4DA1951_g;
    int autoC4DA1951_u;
    unit autoC4DA1951_var;
    unitgroup auto6922DFA5_g;
    int auto6922DFA5_u;
    unit auto6922DFA5_var;
    unitgroup autoA2A38493_g;
    int autoA2A38493_u;
    unit autoA2A38493_var;

    // Variable Initialization

    // Implementation
    auto28BC1F2E_userType = "MinResourceTable";
    auto28BC1F2E_i = 1;
    for ( ; auto28BC1F2E_i <= UserDataInstanceCount(auto28BC1F2E_userType) ; auto28BC1F2E_i += 1 ) {
        lv_indexInstance = UserDataInstance(auto28BC1F2E_userType, auto28BC1F2E_i);
        lv_amount = UserDataGetInt("MinResourceTable", lv_indexInstance, "Amount", 1);
        lv_region = RegionFromName(("Min" + IntToString(lv_amount)));
        if ((lv_region != null)) {
            auto42EBD5E6_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto42EBD5E6_u = UnitGroupCount(auto42EBD5E6_g, c_unitCountAll);
            for (;; auto42EBD5E6_u -= 1) {
                auto42EBD5E6_var = UnitGroupUnitFromEnd(auto42EBD5E6_g, auto42EBD5E6_u);
                if (auto42EBD5E6_var == null) { break; }
                if ((libSCEV_gf_UnitIsMineral(auto42EBD5E6_var) == true)) {
                    UnitSetPropertyFixed(auto42EBD5E6_var, c_unitPropResources, lv_amount);
                }

            }
        }

        lv_region = RegionFromName(("RichMinReplace" + IntToString(lv_amount)));
        if ((lv_region != null)) {
            auto36E6A9AE_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto36E6A9AE_u = UnitGroupCount(auto36E6A9AE_g, c_unitCountAll);
            for (;; auto36E6A9AE_u -= 1) {
                auto36E6A9AE_var = UnitGroupUnitFromEnd(auto36E6A9AE_g, auto36E6A9AE_u);
                if (auto36E6A9AE_var == null) { break; }
                if ((libSCEV_gf_UnitIsMineralRich(auto36E6A9AE_var) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto36E6A9AE_var));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_amount);
                    UnitRemove(auto36E6A9AE_var);
                }

            }
        }

        lv_region = RegionFromName("RichMinReplace");
        if ((lv_region != null)) {
            auto5FC2BA69_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto5FC2BA69_u = UnitGroupCount(auto5FC2BA69_g, c_unitCountAll);
            for (;; auto5FC2BA69_u -= 1) {
                auto5FC2BA69_var = UnitGroupUnitFromEnd(auto5FC2BA69_g, auto5FC2BA69_u);
                if (auto5FC2BA69_var == null) { break; }
                if ((libSCEV_gf_UnitIsMineralRich(auto5FC2BA69_var) == true)) {
                    lv_richMinValueTemp = libNtve_gf_UnitGetPropertyResources(auto5FC2BA69_var, c_unitPropCurrent);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto5FC2BA69_var));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_richMinValueTemp);
                    UnitRemove(auto5FC2BA69_var);
                }

            }
        }

    }
    autoC6DA8D21_userType = "GasResourceTable";
    autoC6DA8D21_i = 1;
    for ( ; autoC6DA8D21_i <= UserDataInstanceCount(autoC6DA8D21_userType) ; autoC6DA8D21_i += 1 ) {
        lv_indexInstance = UserDataInstance(autoC6DA8D21_userType, autoC6DA8D21_i);
        lv_amount = UserDataGetInt("GasResourceTable", lv_indexInstance, "Amount", 1);
        lv_region = RegionFromName(("Gas" + IntToString(lv_amount)));
        if ((lv_region != null)) {
            auto451AA38A_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto451AA38A_u = UnitGroupCount(auto451AA38A_g, c_unitCountAll);
            for (;; auto451AA38A_u -= 1) {
                auto451AA38A_var = UnitGroupUnitFromEnd(auto451AA38A_g, auto451AA38A_u);
                if (auto451AA38A_var == null) { break; }
                if ((libSCEV_gf_UnitIsVespene(auto451AA38A_var) == true)) {
                    UnitSetPropertyFixed(auto451AA38A_var, c_unitPropResources, lv_amount);
                }

            }
        }

        lv_region = RegionFromName(("RichGasReplace" + IntToString(lv_amount)));
        if ((lv_region != null)) {
            autoE38DAE4E_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoE38DAE4E_u = UnitGroupCount(autoE38DAE4E_g, c_unitCountAll);
            for (;; autoE38DAE4E_u -= 1) {
                autoE38DAE4E_var = UnitGroupUnitFromEnd(autoE38DAE4E_g, autoE38DAE4E_u);
                if (autoE38DAE4E_var == null) { break; }
                if ((libSCEV_gf_UnitIsVespeneRich(autoE38DAE4E_var) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VespeneGeyser", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoE38DAE4E_var));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_amount);
                    UnitRemove(autoE38DAE4E_var);
                }

            }
        }

    }
    lv_region = RegionFromName("GasDelete");
    if ((lv_region != null)) {
        autoA7F10B08_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA7F10B08_u = UnitGroupCount(autoA7F10B08_g, c_unitCountAll);
        for (;; autoA7F10B08_u -= 1) {
            autoA7F10B08_var = UnitGroupUnitFromEnd(autoA7F10B08_g, autoA7F10B08_u);
            if (autoA7F10B08_var == null) { break; }
            if ((libSCEV_gf_UnitIsVespene(autoA7F10B08_var) == true)) {
                UnitRemove(autoA7F10B08_var);
            }

        }
    }

    lv_region = RegionFromName("MinDelete");
    if ((lv_region != null)) {
        autoC4DA1951_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC4DA1951_u = UnitGroupCount(autoC4DA1951_g, c_unitCountAll);
        for (;; autoC4DA1951_u -= 1) {
            autoC4DA1951_var = UnitGroupUnitFromEnd(autoC4DA1951_g, autoC4DA1951_u);
            if (autoC4DA1951_var == null) { break; }
            if ((libSCEV_gf_UnitIsMineral(autoC4DA1951_var) == true)) {
                UnitRemove(autoC4DA1951_var);
            }

        }
    }

    lv_region = RegionFromName("MineralDelete");
    if ((lv_region != null)) {
        auto6922DFA5_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6922DFA5_u = UnitGroupCount(auto6922DFA5_g, c_unitCountAll);
        for (;; auto6922DFA5_u -= 1) {
            auto6922DFA5_var = UnitGroupUnitFromEnd(auto6922DFA5_g, auto6922DFA5_u);
            if (auto6922DFA5_var == null) { break; }
            if ((libSCEV_gf_UnitIsMineral(auto6922DFA5_var) == true)) {
                UnitRemove(auto6922DFA5_var);
            }

        }
    }

    lv_region = RegionFromName("TowerDelete");
    if ((lv_region != null)) {
        autoA2A38493_g = UnitGroup("XelNagaTower", 0, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA2A38493_u = UnitGroupCount(autoA2A38493_g, c_unitCountAll);
        for (;; autoA2A38493_u -= 1) {
            autoA2A38493_var = UnitGroupUnitFromEnd(autoA2A38493_g, autoA2A38493_u);
            if (autoA2A38493_var == null) { break; }
            UnitRemove(autoA2A38493_var);
        }
    }

}

void libSCEV_gf_LegacyRemoveExtraGeysers () {
    // Variable Declarations
    unitgroup lv_geyserGroup;
    unit lv_searchGeyser;
    unit lv_targetGeyser;
    fixed lv_distanceToClosestMineral;
    unit lv_closestMineralToSearchGeyser;
    unit lv_closestMineralToTargetGeyser;
    unitgroup lv_mineralGroup;
    int lv_r;

    // Automatic Variable Declarations
    unitgroup auto4A308512_g;
    int auto4A308512_u;
    unit auto4A308512_var;
    unitgroup autoAB7440ED_g;
    int autoAB7440ED_u;
    unit autoAB7440ED_var;
    unitgroup auto3707AA36_g;
    int auto3707AA36_u;
    unit auto3707AA36_var;

    // Variable Initialization
    lv_geyserGroup = UnitGroupEmpty();
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    auto4A308512_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4A308512_u = UnitGroupCount(auto4A308512_g, c_unitCountAll);
    for (;; auto4A308512_u -= 1) {
        auto4A308512_var = UnitGroupUnitFromEnd(auto4A308512_g, auto4A308512_u);
        if (auto4A308512_var == null) { break; }
        UnitGroupAdd(lv_mineralGroup, auto4A308512_var);
    }
    autoAB7440ED_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB7440ED_u = UnitGroupCount(autoAB7440ED_g, c_unitCountAll);
    for (;; autoAB7440ED_u -= 1) {
        autoAB7440ED_var = UnitGroupUnitFromEnd(autoAB7440ED_g, autoAB7440ED_u);
        if (autoAB7440ED_var == null) { break; }
        if ((libSCEV_gf_UnitIsVespene(autoAB7440ED_var) == true) && (libSCEV_gf_UnitIsVespeneRich(autoAB7440ED_var) == false)) {
            UnitGroupAdd(lv_geyserGroup, autoAB7440ED_var);
        }

    }
    while ((UnitGroupCount(lv_geyserGroup, c_unitCountAll) > 1)) {
        lv_searchGeyser = UnitGroupUnit(lv_geyserGroup, 1);
        lv_targetGeyser = null;
        lv_closestMineralToTargetGeyser = null;
        lv_closestMineralToSearchGeyser = null;
        auto3707AA36_g = UnitGroupFilterRegion(lv_geyserGroup, RegionCircle(UnitGetPosition(lv_searchGeyser), 16.0), 0);
        auto3707AA36_u = UnitGroupCount(auto3707AA36_g, c_unitCountAll);
        for (;; auto3707AA36_u -= 1) {
            auto3707AA36_var = UnitGroupUnitFromEnd(auto3707AA36_g, auto3707AA36_u);
            if (auto3707AA36_var == null) { break; }
            if ((auto3707AA36_var != lv_searchGeyser) && ((DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(auto3707AA36_var)) > 12.0) || (DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(auto3707AA36_var)) < 6.0)) && (UnitGetHeight(auto3707AA36_var) == UnitGetHeight(lv_searchGeyser))) {
                lv_targetGeyser = auto3707AA36_var;
                break;
            }

        }
        if ((lv_targetGeyser != null) && (lv_targetGeyser != lv_searchGeyser)) {
            lv_closestMineralToSearchGeyser = UnitGroupClosestToPoint(lv_mineralGroup, UnitGetPosition(lv_searchGeyser));
            lv_closestMineralToTargetGeyser = UnitGroupClosestToPoint(lv_mineralGroup, UnitGetPosition(lv_targetGeyser));
            if ((DistanceBetweenPoints(UnitGetPosition(lv_targetGeyser), UnitGetPosition(lv_closestMineralToTargetGeyser)) == DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(lv_closestMineralToSearchGeyser)))) {
                lv_r = RandomInt(1, 2);
                if ((lv_r == 1)) {
                    UnitRemove(lv_targetGeyser);
                }
                else {
                    UnitRemove(lv_searchGeyser);
                }
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(lv_targetGeyser), UnitGetPosition(lv_closestMineralToTargetGeyser)) > DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(lv_closestMineralToSearchGeyser)))) {
                UnitRemove(lv_targetGeyser);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(lv_closestMineralToSearchGeyser)) > DistanceBetweenPoints(UnitGetPosition(lv_targetGeyser), UnitGetPosition(lv_closestMineralToTargetGeyser)))) {
                UnitRemove(lv_searchGeyser);
            }
            UnitGroupRemove(lv_geyserGroup, lv_targetGeyser);
            UnitGroupRemove(lv_geyserGroup, lv_searchGeyser);
        }
        else {
            UnitGroupRemove(lv_geyserGroup, lv_searchGeyser);
        }
    }
}

bool libSCEV_gf_IsBWMap () {
    // Automatic Variable Declarations
    // Implementation
    return (PointFromName("BWMap") != null);
}

void libSCEV_gf_LegacyRandomizeColors () {
    // Variable Declarations
    int lv_rand;

    // Automatic Variable Declarations
    playergroup autoB9240A1B_g;
    int autoB9240A1B_var;

    // Variable Initialization

    // Implementation
    autoB9240A1B_g = PlayerGroupActive();
    autoB9240A1B_var = -1;
    while (true) {
        autoB9240A1B_var = PlayerGroupNextPlayer(autoB9240A1B_g, autoB9240A1B_var);
        if (autoB9240A1B_var < 0) { break; }
        while (true) {
            lv_rand = RandomInt(1, 15);
            if ((libSCEV_gv_colorIsInUse[lv_rand] == false)) {
                break;
            }

        }
        PlayerSetColorIndex(autoB9240A1B_var, libSCEV_gf_ColorFromIndex(lv_rand), true);
        libSCEV_gv_colorIsInUse[lv_rand] = true;
    }
}

int libSCEV_gf_ColorFromIndex (int lp_colorIndedx) {
    // Automatic Variable Declarations
    int auto04CE9FCB_val;

    // Implementation
    auto04CE9FCB_val = lp_colorIndedx;
    if (auto04CE9FCB_val == 1) {
        return 1;
    }
    else if (auto04CE9FCB_val == 2) {
        return 2;
    }
    else if (auto04CE9FCB_val == 3) {
        return 3;
    }
    else if (auto04CE9FCB_val == 4) {
        return 4;
    }
    else if (auto04CE9FCB_val == 5) {
        return 5;
    }
    else if (auto04CE9FCB_val == 6) {
        return 6;
    }
    else if (auto04CE9FCB_val == 7) {
        return 7;
    }
    else if (auto04CE9FCB_val == 8) {
        return 8;
    }
    else if (auto04CE9FCB_val == 9) {
        return 9;
    }
    else if (auto04CE9FCB_val == 10) {
        return 10;
    }
    else if (auto04CE9FCB_val == 11) {
        return 11;
    }
    else if (auto04CE9FCB_val == 12) {
        return 12;
    }
    else if (auto04CE9FCB_val == 13) {
        return 13;
    }
    else if (auto04CE9FCB_val == 14) {
        return 14;
    }
    else if (auto04CE9FCB_val == 15) {
        return 15;
    }
    else {
        return 0;
    }
}

bool libSCEV_gf_UnitIsMineral (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "BattleStationMineralField") || (UnitGetType(lp_unit) == "BattleStationMineralField750") || (UnitGetType(lp_unit) == "LabMineralField750") || (UnitGetType(lp_unit) == "LabMineralField") || (UnitGetType(lp_unit) == "MineralField") || (UnitGetType(lp_unit) == "MineralField450") || (UnitGetType(lp_unit) == "MineralField750") || (UnitGetType(lp_unit) == "MineralFieldOpaque900") || (UnitGetType(lp_unit) == "MineralFieldOpaque") || (UnitGetType(lp_unit) == "PurifierMineralField") || (UnitGetType(lp_unit) == "PurifierMineralField750") || (UnitGetType(lp_unit) == "PurifierRichMineralField") || (UnitGetType(lp_unit) == "PurifierRichMineralField750") || (UnitGetType(lp_unit) == "RichMineralField") || (UnitGetType(lp_unit) == "RichMineralField750"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libSCEV_gf_UnitIsMineralSmall (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "BattleStationMineralField750") || (UnitGetType(lp_unit) == "LabMineralField750") || (UnitGetType(lp_unit) == "MineralField450") || (UnitGetType(lp_unit) == "MineralField750") || (UnitGetType(lp_unit) == "MineralFieldOpaque900") || (UnitGetType(lp_unit) == "PurifierMineralField750") || (UnitGetType(lp_unit) == "PurifierRichMineralField750") || (UnitGetType(lp_unit) == "RichMineralField750"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libSCEV_gf_UnitIsMineralRich (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "PurifierRichMineralField") || (UnitGetType(lp_unit) == "PurifierRichMineralField750") || (UnitGetType(lp_unit) == "RichMineralField") || (UnitGetType(lp_unit) == "RichMineralField750"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libSCEV_gf_UnitIsVespene (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "VespeneGeyser") || (UnitGetType(lp_unit) == "ProtossVespeneGeyser") || (UnitGetType(lp_unit) == "PurifierVespeneGeyser") || (UnitGetType(lp_unit) == "ShakurasVespeneGeyser") || (UnitGetType(lp_unit) == "SpacePlatformGeyser") || (UnitGetType(lp_unit) == "RichVespeneGeyser") || (UnitGetType(lp_unit) == "TempleVespeneGeyserSCBW"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libSCEV_gf_UnitIsVespeneRich (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "RichVespeneGeyser"))) {
        return true;
    }
    else {
        return false;
    }
}

string libSCEV_gf_GetSmallMineralReplaceLink (unit lp_smallMineral) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_smallMineral) == "BattleStationMineralField750")) {
        return "BattleStationMineralField";
    }
    else if ((UnitGetType(lp_smallMineral) == "LabMineralField750")) {
        return "LabMineralField";
    }
    else if ((UnitGetType(lp_smallMineral) == "MineralField750")) {
        return "MineralField";
    }
    else if ((UnitGetType(lp_smallMineral) == "MineralFieldOpaque900")) {
        return "MineralFieldOpaque";
    }
    else if ((UnitGetType(lp_smallMineral) == "PurifierMineralField750")) {
        return "PurifierMineralField";
    }
    else if ((UnitGetType(lp_smallMineral) == "PurifierRichMineralField750")) {
        return "PurifierRichMineralField";
    }
    else if ((UnitGetType(lp_smallMineral) == "RichMineralField750")) {
        return "RichMineralField";
    }
    return null;
}

void libSCEV_gf_SetPlayerRaceToBW (int lp_player) {
    // Automatic Variable Declarations
    string autoBA67DF13_val;

    // Implementation
    autoBA67DF13_val = PlayerRace(lp_player);
    if (autoBA67DF13_val == ("Terr")) {
        PlayerSetRace(lp_player, "BWTe");
    }
    else if (autoBA67DF13_val == ("Prot")) {
        PlayerSetRace(lp_player, "BWPr");
    }
    else if (autoBA67DF13_val == ("Zerg")) {
        PlayerSetRace(lp_player, "BWZe");
    }
    else {
    }
}

void libSCEV_gf_SetPlayerRaceToSC2 (int lp_player) {
    // Automatic Variable Declarations
    string auto3C423A13_val;

    // Implementation
    auto3C423A13_val = PlayerRace(lp_player);
    if (auto3C423A13_val == ("BWTe")) {
        PlayerSetRace(lp_player, "Terr");
    }
    else if (auto3C423A13_val == ("BWPr")) {
        PlayerSetRace(lp_player, "Prot");
    }
    else if (auto3C423A13_val == ("BWZe")) {
        PlayerSetRace(lp_player, "Zerg");
    }
    else {
    }
}

void libSCEV_gf_SCEvoEnableAIOption (bool lp_activateDeactivate, int lp_option) {
    // Variable Declarations
    bool lv_onOff;
    bool lv_enabledisable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_activateDeactivate == true)) {
        lv_onOff = true;
        lv_enabledisable = true;
    }

    if ((lp_option == libSCEV_ge_SCEvoAIOption_MineralWallClearing)) {
        libSCEV_gf_MineralWallsActivate(lv_onOff);
    }
}

void libSCEV_gf_MineralWallsActivate (bool lp_onOff) {
    // Automatic Variable Declarations
    unitgroup auto8559185C_g;
    int auto8559185C_u;
    unit auto8559185C_var;

    // Implementation
    if ((lp_onOff == true)) {
        auto8559185C_g = UnitGroup(null, 0, RegionPlayableMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8559185C_u = UnitGroupCount(auto8559185C_g, c_unitCountAll);
        for (;; auto8559185C_u -= 1) {
            auto8559185C_var = UnitGroupUnitFromEnd(auto8559185C_g, auto8559185C_u);
            if (auto8559185C_var == null) { break; }
            if ((UnitGetPropertyFixed(auto8559185C_var, c_unitPropResources, c_unitPropCurrent) < 70.0)) {
                UnitGroupAdd(libSCEV_gv_mineralWallsGlobalMineralWalls, auto8559185C_var);
            }

        }
        Wait((2.0 * 60.0), c_timeGame);
        TriggerEnable(libSCEV_gt_MineralWallsUpdate, true);
    }
    else {
        TriggerEnable(libSCEV_gt_MineralWallsUpdate, false);
    }
}

bool libSCEV_gf_SCEvoFeatureActive (int lp_feature) {
    // Automatic Variable Declarations
    // Implementation
    return libSCEV_gv_sCEvoFeatureEnabled[(lp_feature)];
}

void libSCEV_gf_SCEvoActivateFeature (int lp_feature, bool lp_activateDeactivate) {
    // Variable Declarations
    bool lv_onOff;
    bool lv_enabledisable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_activateDeactivate == true)) {
        lv_onOff = true;
        lv_enabledisable = true;
    }

    if ((lp_feature == libSCEV_ge_SCEvoFeatures_FractionalArmor)) {
        libSCEV_gf_FractionalArmorActivate(lv_onOff);
    }
    else if ((lp_feature == libSCEV_ge_SCEvoFeatures_MissChance)) {
        libSCEV_gf_MissChanceActivate(lp_activateDeactivate);
    }
    else if ((lp_feature == libSCEV_ge_SCEvoFeatures_LegacyUnitSwap)) {
        libSCEV_gf_LegacyUnitSwapActivate(lp_activateDeactivate);
        TriggerEnable(libSCEV_gt_LegacyUnitSwap, lv_onOff);
    }
    else if ((lp_feature == libSCEV_ge_SCEvoFeatures_LegacyUnitSwapErrorLog)) {
        if ((libSCEV_gf_SCEvoFeatureActive(libSCEV_ge_SCEvoFeatures_LegacyUnitSwap) == false)) {
            libSCEV_gf_SCEvoActivateFeature(libSCEV_ge_SCEvoFeatures_LegacyUnitSwap, true);
        }

        libSCEV_gv_legacyUnitSwapErrorLogOnly = lv_onOff;
    }
    else if ((lp_feature == libSCEV_ge_SCEvoFeatures_LegacyCheats)) {
        libSCEV_gv_cheatsActive = lv_onOff;
        TriggerEnable(libSCEV_gt_LegacyCheatCheatTracker, lv_onOff);
    }
    else if ((lp_feature == libSCEV_ge_SCEvoFeatures_LegacyRefund)) {
        TriggerEnable(libSCEV_gt_LegacyRefund, lv_onOff);
    }
    else if ((lp_feature == libSCEV_ge_SCEvoFeatures_LegacyIcons)) {
        libSCEV_gf_LegacyIconsActivate(lp_activateDeactivate, PlayerGroupAll());
    }
    else if ((lp_feature == libSCEV_ge_SCEvoFeatures_AllyMinimapView)) {
        libSCEV_gf_MinimapAllyViewEnableDisable(lv_enabledisable);
    }
    else if (true) {
    }
    libSCEV_gv_sCEvoFeatureEnabled[(lp_feature)] = lv_onOff;
}

void libSCEV_gf_FractionalArmorActivate (bool lp_onOff) {
    // Automatic Variable Declarations
    playergroup autoD10B862A_g;
    int autoD10B862A_var;
    unitgroup autoEC8BC7E2_g;
    int autoEC8BC7E2_u;
    unit autoEC8BC7E2_var;
    unitgroup auto41E7D108_g;
    int auto41E7D108_u;
    unit auto41E7D108_var;

    // Implementation
    if ((libSCEV_gv_fractionalArmorActivated == false)) {
        libSCEV_gv_fractionalArmorActivated = true;
        libSCEV_gf_FractionalArmorUpdateRegisterEvents(libSCEV_gt_FractionalArmorUpdateTrigger);
    }

    TriggerEnable(libSCEV_gt_FractionalArmorAdd, lp_onOff);
    TriggerEnable(libSCEV_gt_FractionalArmorUpdateTrigger, lp_onOff);
    TriggerEnable(libSCEV_gt_FractionalArmorUpgrade, lp_onOff);
    TriggerEnable(libSCEV_gt_FractionalArmorPlayerDamage, lp_onOff);
    TriggerEnable(libSCEV_gt_FractionalArmorGodCheat, lp_onOff);
    if ((lp_onOff == true)) {
        autoD10B862A_g = PlayerGroupAll();
        autoD10B862A_var = -1;
        while (true) {
            autoD10B862A_var = PlayerGroupNextPlayer(autoD10B862A_g, autoD10B862A_var);
            if (autoD10B862A_var < 0) { break; }
            PlayerScoreValueSetFromFixed(autoD10B862A_var, "SCBW_DamageFormula@DamageMultiplierTaken", (PlayerGetPropertyFixed(autoD10B862A_var, c_playerPropDamageTakenPercent) / 100.0));
            PlayerScoreValueSetFromFixed(autoD10B862A_var, "SCBW_DamageFormula@DamageMultiplierDealt", (PlayerGetPropertyFixed(autoD10B862A_var, c_playerPropDamageDealtPercent) / 100.0));
        }
        auto41E7D108_g = UnitGroup(null, c_playerAny, RegionEntireMap(), libSCEV_gv_fractionalArmorFilter, 0);
        auto41E7D108_u = UnitGroupCount(auto41E7D108_g, c_unitCountAll);
        for (;; auto41E7D108_u -= 1) {
            auto41E7D108_var = UnitGroupUnitFromEnd(auto41E7D108_g, auto41E7D108_u);
            if (auto41E7D108_var == null) { break; }
            libSCEV_gf_FractionalArmorUpdate(auto41E7D108_var);
        }
    }
    else {
        autoEC8BC7E2_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoEC8BC7E2_u = UnitGroupCount(autoEC8BC7E2_g, c_unitCountAll);
        for (;; autoEC8BC7E2_u -= 1) {
            autoEC8BC7E2_var = UnitGroupUnitFromEnd(autoEC8BC7E2_g, autoEC8BC7E2_u);
            if (autoEC8BC7E2_var == null) { break; }
            UnitBehaviorRemove(autoEC8BC7E2_var, "SCBW_DamageFormula@FractionalArmor", 1);
        }
    }
}

void libSCEV_gf_FractionalArmorUpdate (unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_target, "SCBW_DamageFormula@FractionalArmor") == false)) {
        UnitBehaviorAdd(lp_target, "SCBW_DamageFormula@FractionalArmor", lp_target, 1);
    }

    UnitBehaviorEffectTreeSetUserData(lp_target, "SCBW_DamageFormula@FractionalArmor", "LifeArmor", UnitGetPropertyFixed(lp_target, c_unitPropLifeArmor, c_unitPropCurrent));
    UnitBehaviorEffectTreeSetUserData(lp_target, "SCBW_DamageFormula@FractionalArmor", "ShieldArmor", UnitGetPropertyFixed(lp_target, c_unitPropShieldArmor, c_unitPropCurrent));
}

void libSCEV_gf_FractionalArmorUpdatePlayerDamage (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerScoreValueSetFromFixed(lp_player, "SCBW_DamageFormula@DamageMultiplierDealt", (PlayerGetPropertyFixed(lp_player, c_playerPropDamageDealtPercent) / 100.0));
    PlayerScoreValueSetFromFixed(lp_player, "SCBW_DamageFormula@DamageMultiplierTaken", (PlayerGetPropertyFixed(lp_player, c_playerPropDamageTakenPercent) / 100.0));
}

void libSCEV_gf_FractionalArmorUpdateRegisterEvents (trigger lp_trigger) {
    // Variable Declarations
    string lv_effectEntry;
    int lv_i;

    // Automatic Variable Declarations
    int auto29FC39E3_ae;
    const int auto29FC39E3_ai = 1;

    // Variable Initialization

    // Implementation
    auto29FC39E3_ae = CatalogEntryCount(c_gameCatalogEffect);
    lv_i = 1;
    for ( ; ( (auto29FC39E3_ai >= 0 && lv_i <= auto29FC39E3_ae) || (auto29FC39E3_ai < 0 && lv_i >= auto29FC39E3_ae) ) ; lv_i += auto29FC39E3_ai ) {
        lv_effectEntry = CatalogEntryGet(c_gameCatalogEffect, lv_i);
        if ((CatalogEntryScope(c_gameCatalogEffect, lv_effectEntry) == "CEffectUserData") && (CatalogFieldValueGet(c_gameCatalogEffect, lv_effectEntry, "Key", c_playerAny) == "IncomingDamage")) {
            TriggerAddEventPlayerEffectUsed(lp_trigger, c_playerAny, lv_effectEntry);
        }

    }
}

void libSCEV_gf_MissChanceRevealTimerStart () {
    // Automatic Variable Declarations
    // Implementation
    if ((TimerGetRemaining(libSCEV_gv_missChanceRevealTimer) <= 0.0)) {
        TimerStart(libSCEV_gv_missChanceRevealTimer, RandomFixed(0.0625, 6.25), false, c_timeGame);
        TriggerEnable(libSCEV_gt_MissChanceRevealTimerExpire, true);
    }

}

void libSCEV_gf_MissChanceRegisterRegion (trigger lp_trigger, region lp_region, bool lp_enterExit) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitRegion(lp_trigger, null, lp_region, lp_enterExit);
}

void libSCEV_gf_MissChanceActivate (bool lp_activateDeactivate) {
    // Variable Declarations
    region lv_region;
    int lv_i;

    // Automatic Variable Declarations
    const int auto4A2BE103_ae = libSCEV_gv_missChanceRegionCount;
    const int auto4A2BE103_ai = 1;
    unitgroup auto17A0307A_g;
    int auto17A0307A_u;
    unit auto17A0307A_var;
    unitgroup autoCF381F81_g;
    int autoCF381F81_u;
    unit autoCF381F81_var;

    // Variable Initialization

    // Implementation
    if ((lp_activateDeactivate == true)) {
        TriggerEnable(libSCEV_gt_MissChanceAdd, true);
        TriggerEnable(libSCEV_gt_MissChanceShrubCheck, true);
        lv_i = 1;
        for ( ; ( (auto4A2BE103_ai >= 0 && lv_i <= auto4A2BE103_ae) || (auto4A2BE103_ai < 0 && lv_i >= auto4A2BE103_ae) ) ; lv_i += auto4A2BE103_ai ) {
            lv_region = RegionFromName(("HighGround_" + IntToString(lv_i)));
            if ((lv_region != null) && (libSCEV_gv_missChanceRegion[lv_i] == null)) {
                libSCEV_gv_missChanceRegion[lv_i] = lv_region;
                libSCEV_gf_MissChanceRegisterRegion(libSCEV_gt_MissChanceHighGroundRegionEnter, lv_region, true);
                libSCEV_gf_MissChanceRegisterRegion(libSCEV_gt_MissChanceHighGroundRegionExit, lv_region, false);
                TriggerEnable(libSCEV_gt_MissChanceHighGroundRegionEnter, true);
                TriggerEnable(libSCEV_gt_MissChanceHighGroundRegionExit, true);
            }

        }
        if ((CatalogFieldValueGet(c_gameCatalogGame, "Dflt", "AttackRevealBehavior", c_playerAny) == "")) {
            TriggerEnable(libSCEV_gt_MissChanceRevealAttacker, true);
        }

        autoCF381F81_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoCF381F81_u = UnitGroupCount(autoCF381F81_g, c_unitCountAll);
        for (;; autoCF381F81_u -= 1) {
            autoCF381F81_var = UnitGroupUnitFromEnd(autoCF381F81_g, autoCF381F81_u);
            if (autoCF381F81_var == null) { break; }
            UnitBehaviorAdd(autoCF381F81_var, "SCBW_MissChance", autoCF381F81_var, 1);
            if ((UnitFilterMatch(autoCF381F81_var, UnitGetOwner(autoCF381F81_var), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), 0)) == true) && (StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoCF381F81_var), "EditorCategories", c_playerAny), "Destructible", c_stringAnywhere, c_stringNoCase) == false)) {
                UnitBehaviorAdd(autoCF381F81_var, "SCBW_MissChance@ShrubCheck", autoCF381F81_var, 1);
            }

        }
    }
    else {
        TriggerEnable(libSCEV_gt_MissChanceAdd, false);
        TriggerEnable(libSCEV_gt_MissChanceShrubCheck, false);
        TriggerEnable(libSCEV_gt_MissChanceRevealAttacker, false);
        TriggerEnable(libSCEV_gt_MissChanceHighGroundRegionEnter, false);
        TriggerEnable(libSCEV_gt_MissChanceHighGroundRegionExit, false);
        auto17A0307A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto17A0307A_u = UnitGroupCount(auto17A0307A_g, c_unitCountAll);
        for (;; auto17A0307A_u -= 1) {
            auto17A0307A_var = UnitGroupUnitFromEnd(auto17A0307A_g, auto17A0307A_u);
            if (auto17A0307A_var == null) { break; }
            UnitBehaviorRemove(auto17A0307A_var, "SCBW_MissChance", 1);
            UnitBehaviorRemove(auto17A0307A_var, "SCBW_MissChance@Shrub", 1);
            UnitBehaviorRemove(auto17A0307A_var, "SCBW_MissChance@HighGroundShrub", 1);
            UnitBehaviorRemove(auto17A0307A_var, "SCBW_MissChance@HighGroundFake", 1);
            UnitBehaviorRemove(auto17A0307A_var, "SCBW_MissChance@NotInShrub", 1);
            UnitBehaviorRemove(auto17A0307A_var, "SCBW_MissChance@ShrubCheck", 1);
        }
    }
}

void libSCEV_gf_LegacyUnitSwapActivate (bool lp_activateDeactivate) {
    // Automatic Variable Declarations
    playergroup auto112B7167_g;
    int auto112B7167_var;
    playergroup auto0B2E2FFE_g;
    int auto0B2E2FFE_var;

    // Implementation
    if ((lp_activateDeactivate == true)) {
        auto0B2E2FFE_g = PlayerGroupAll();
        auto0B2E2FFE_var = -1;
        while (true) {
            auto0B2E2FFE_var = PlayerGroupNextPlayer(auto0B2E2FFE_g, auto0B2E2FFE_var);
            if (auto0B2E2FFE_var < 0) { break; }
            PlayerAddResponse(auto0B2E2FFE_var, "SCBWUnitSwap");
        }
    }
    else {
        auto112B7167_g = PlayerGroupAll();
        auto112B7167_var = -1;
        while (true) {
            auto112B7167_var = PlayerGroupNextPlayer(auto112B7167_g, auto112B7167_var);
            if (auto112B7167_var < 0) { break; }
            PlayerRemoveResponse(auto112B7167_var, "SCBWUnitSwap");
        }
    }
}

void libSCEV_gf_LegacyIconsActivate (bool lp_activateDeactivate, playergroup lp_players) {
    // Variable Declarations
    int lv_panel;

    // Automatic Variable Declarations
    playergroup autoF07F57A5_g;
    int autoF07F57A5_var;
    playergroup auto4B565C14_g;
    int auto4B565C14_var;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    lv_panel = DialogControlLastCreated();
    if ((lp_activateDeactivate == true)) {
        autoF07F57A5_g = lp_players;
        autoF07F57A5_var = -1;
        while (true) {
            autoF07F57A5_var = PlayerGroupNextPlayer(autoF07F57A5_g, autoF07F57A5_var);
            if (autoF07F57A5_var < 0) { break; }
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(autoF07F57A5_var, "ClassicIcons", lp_activateDeactivate);
        }
        DialogControlSetAnimationState(lv_panel, lp_players, "UseClassicIcons", "True");
    }
    else {
        auto4B565C14_g = lp_players;
        auto4B565C14_var = -1;
        while (true) {
            auto4B565C14_var = PlayerGroupNextPlayer(auto4B565C14_g, auto4B565C14_var);
            if (auto4B565C14_var < 0) { break; }
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto4B565C14_var, "ClassicIcons", lp_activateDeactivate);
        }
        DialogControlSetAnimationState(lv_panel, lp_players, "UseClassicIcons", "False");
    }
}

void libSCEV_gf_LegacyCheatEvent (trigger t, int lp_cheat) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libSCEV_ge_LegacyCheat_Ident(lp_cheat));
}

string libSCEV_gf_LegacyCheatCheatToString (int lp_cheat) {
    // Automatic Variable Declarations
    // Implementation
    return libSCEV_ge_LegacyCheat_Ident(lp_cheat);
}

void libSCEV_gf_OperationCwal (unit lp_unit, int lp_type) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto1DB0A704_val;
    int auto91789F07_ae;
    const int auto91789F07_ai = 1;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    auto1DB0A704_val = lp_type;
    if (auto1DB0A704_val == libSCEV_ge_OperationCwal_Type_Construction) {
        UnitSetProgressComplete(lp_unit, 1, 99);
    }
    else if (auto1DB0A704_val == libSCEV_ge_OperationCwal_Type_Morph) {
        UnitBehaviorAdd(lp_unit, "InstantMorph", lp_unit, 1);
    }
    else {
        auto91789F07_ae = UnitQueueItemCount(lp_unit, 1);
        lv_i = 1;
        for ( ; ( (auto91789F07_ai >= 0 && lv_i <= auto91789F07_ae) || (auto91789F07_ai < 0 && lv_i >= auto91789F07_ae) ) ; lv_i += auto91789F07_ai ) {
            UnitSetProgressComplete(lp_unit, lv_i, 100);
        }
    }
}

void libSCEV_gf_InfiniteMoneyMapCheck () {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("SCEV_LibraryVariables", "InfiniteMoneyMapCheck", "Enabled", 1) == 1) && (CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SCVHarvest", "FlagArray[" + IntToString(0) + "]", c_playerAny) == 1)) {
        TriggerEnable(libSCEV_gt_InfiniteMoneyMapTrigger, true);
        libSCEV_gf_InfiniteMoneyMapAction(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    }
    else {
        TriggerEnable(libSCEV_gt_InfiniteMoneyMapTrigger, false);
    }
}

void libSCEV_gf_InfiniteMoneyMapAction (unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoA874CF5B_g;
    int autoA874CF5B_u;

    // Variable Initialization

    // Implementation
    autoA874CF5B_g = lp_unitGroup;
    autoA874CF5B_u = UnitGroupCount(autoA874CF5B_g, c_unitCountAll);
    for (;; autoA874CF5B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA874CF5B_g, autoA874CF5B_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "SCVSCBW")) {
            libSCEV_gf_InfiniteMoneyMapNewOrder(lv_unit, AbilityCommand("SCVSCBW@Harvest", 0), AbilityCommand("SCVSCBW@HarvestNoQue", 0));
        }
        else if ((UnitGetType(lv_unit) == "DroneSCBW")) {
            libSCEV_gf_InfiniteMoneyMapNewOrder(lv_unit, AbilityCommand("DroneSCBW@Harvest", 0), AbilityCommand("DroneSCBW@HarvestNoQue", 0));
        }
        else if ((UnitGetType(lv_unit) == "ProbeSCBW")) {
            libSCEV_gf_InfiniteMoneyMapNewOrder(lv_unit, AbilityCommand("ProbeSCBW@Harvest", 0), AbilityCommand("ProbeSCBW@HarvestNoQue", 0));
        }
        else if (true) {
        }
    }
}

void libSCEV_gf_InfiniteMoneyMapNewOrder (unit lp_unit, abilcmd lp_oldAbil, abilcmd lp_newAbil) {
    // Variable Declarations
    int lv_i;
    int lv_count;
    order[4] lv_orders;
    order lv_currOrder;

    // Automatic Variable Declarations
    const int auto3A14DDC0_ae = 3;
    const int auto3A14DDC0_ai = 1;
    int auto6462CCD0_ae;
    const int auto6462CCD0_ai = 1;

    // Variable Initialization
    lv_count = -1;

    // Implementation
    lv_i = 0;
    for ( ; ( (auto3A14DDC0_ai >= 0 && lv_i <= auto3A14DDC0_ae) || (auto3A14DDC0_ai < 0 && lv_i >= auto3A14DDC0_ae) ) ; lv_i += auto3A14DDC0_ai ) {
        lv_currOrder = UnitOrder(lp_unit, lv_i);
        if ((lv_currOrder != null)) {
            if ((OrderGetAbilityCommand(lv_currOrder) == lp_oldAbil)) {
                lv_orders[lv_i] = OrderTargetingUnit(lp_newAbil, OrderGetTargetUnit(lv_currOrder));
            }
            else {
                lv_orders[lv_i] = UnitOrder(lp_unit, lv_i);
            }
            lv_count = lv_i;
        }
        else {
            break;
        }
    }
    UnitAbilityAdd(lp_unit, AbilityCommandGetAbility(lp_newAbil));
    UnitAbilityRemove(lp_unit, AbilityCommandGetAbility(lp_oldAbil));
    if ((lv_count == -1)) {
        return;
    }

    auto6462CCD0_ae = lv_count;
    lv_i = 0;
    for ( ; ( (auto6462CCD0_ai >= 0 && lv_i <= auto6462CCD0_ae) || (auto6462CCD0_ai < 0 && lv_i >= auto6462CCD0_ae) ) ; lv_i += auto6462CCD0_ai ) {
        if ((lv_i == 0)) {
            UnitIssueOrder(lp_unit, lv_orders[lv_i], c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, lv_orders[lv_i], c_orderQueueAddToEnd);
        }
    }
}

string libSCEV_gf_MergeStatusEffectsMiscDataGet (string lp_buff, unit lp_unit) {
    // Automatic Variable Declarations
    string autoCB941DF5_val;

    // Implementation
    autoCB941DF5_val = lp_buff;
    if (autoCB941DF5_val == "ScienceVesselSCBWDefensiveMatrix") {
        return FixedToString(UnitBehaviorEffectTreeUserData(lp_unit, "ScienceVesselSCBWDefensiveMatrix@Data", "DefensiveMatrixShield"), 1);
    }
    else {
        return "?";
    }
}

bool libSCEV_gf_MergeStatusEffectsBuffTransferrable (string lp_buff) {
    // Variable Declarations
    int lv_i;
    int lv_aliasCount;

    // Automatic Variable Declarations
    int autoC0245FF2_ae;
    const int autoC0245FF2_ai = 1;

    // Variable Initialization
    lv_aliasCount = CatalogFieldValueCount(c_gameCatalogBehavior, lp_buff, "TechAliasArray", c_playerAny);

    // Implementation
    autoC0245FF2_ae = (lv_aliasCount - 1);
    lv_i = 0;
    for ( ; ( (autoC0245FF2_ai >= 0 && lv_i <= autoC0245FF2_ae) || (autoC0245FF2_ai < 0 && lv_i >= autoC0245FF2_ae) ) ; lv_i += autoC0245FF2_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogBehavior, lp_buff, "TechAliasArray[" + IntToString(lv_i) + "]", c_playerAny) == "_Transfer")) {
            return true;
        }

    }
    return false;
}

void libSCEV_gf_MergeStatusEffectsMiscDataSet (string lp_buff, unit lp_unit, string lp_miscData) {
    // Automatic Variable Declarations
    string auto3B9EA1F5_val;

    // Implementation
    if (((lp_miscData == null) || (lp_miscData == "") || (lp_miscData == "?"))) {
        return;
    }

    auto3B9EA1F5_val = lp_buff;
    if (auto3B9EA1F5_val == "ScienceVesselSCBWDefensiveMatrix") {
        UnitBehaviorEffectTreeSetUserData(lp_unit, "ScienceVesselSCBWDefensiveMatrix@Data", "DefensiveMatrixShield", StringToFixed(lp_miscData));
    }
    else {
    }
}

void libSCEV_gf_MergeStatusEffectsInitialize () {
    // Variable Declarations
    string lv_userType;
    string lv_instance;
    trigger lv_trigger;
    string lv_abil;
    abilcmd lv_abilCmd;
    int lv_commandIndex;
    int lv_abilStage;
    bool lv_includeSharedAbils;

    // Automatic Variable Declarations
    string auto11527A24_userType;
    int auto11527A24_i;

    // Variable Initialization
    lv_userType = "SCEV_MergeStatusEffectsEventList";
    lv_trigger = libSCEV_gt_MergeStatusEffectsTrack;
    lv_abilStage = -6;

    // Implementation
    auto11527A24_userType = "SCEV_MergeStatusEffectsEventList";
    auto11527A24_i = 1;
    for ( ; auto11527A24_i <= UserDataInstanceCount(auto11527A24_userType) ; auto11527A24_i += 1 ) {
        lv_instance = UserDataInstance(auto11527A24_userType, auto11527A24_i);
        lv_abil = UserDataGetGameLink(lv_userType, lv_instance, "Game Link", 1);
        lv_commandIndex = UserDataGetInt(lv_userType, lv_instance, "Command Index", 1);
        if (((((lv_commandIndex >= 0) && (lv_commandIndex <= 31)) == false) || (lv_abil == "") || (lv_abil == null))) {
            continue;
        }

        lv_abilCmd = AbilityCommand(lv_abil, lv_commandIndex);
        lv_abilStage = UserDataGetInt(lv_userType, lv_instance, "AbilStage", 1);
        if ((lv_abilCmd != null)) {
            TriggerAddEventUnitAbility(lv_trigger, null, lv_abilCmd, lv_abilStage, lv_includeSharedAbils);
        }

    }
}

void libSCEV_gf_DisableClassicSkins (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerType(lp_player) == c_playerTypeUser) && (UserDataGetInt("SCEV_LibraryVariables", "DisableClassicSkins", "Enabled", 1) == 1)) {
        if ((PlayerHasReward(lp_player, "SkinCommandCenterRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CommandCenterRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinNexusRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "NexusRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinHatcheryRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HatcheryRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinHydraliskRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HydraliskRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinZealotRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZealotRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinMarineRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarineRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinUltraliskRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "UltraliskRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinCarrierRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CarrierRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinBattlecruiserRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BattlecruiserRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinProbeRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbeRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinSCVRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SCVRemastered", false);
        }

        if ((PlayerHasReward(lp_player, "SkinDroneRemastered") == true)) {
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DroneRemastered", false);
        }

    }

}

bool libSCEV_gf_PreloadSplatAssets (bool lp_a, bool lp_b) {
    // Variable Declarations
    const int lv_actorCount = 6;
    actor[lv_actorCount + 1][libSCEV_gv_mAX_PLAYERS + 1] lv_actor;
    int lv_i;
    point lv_pos;
    playergroup lv_pg;

    // Automatic Variable Declarations
    playergroup auto1831B9E0_g;
    int auto1831B9E0_var;
    playergroup auto537193CD_g;
    int auto537193CD_var;
    int autoB530066F_ae;
    const int autoB530066F_ai = 1;

    // Variable Initialization
    lv_pg = PlayerGroupActive();

    // Implementation
    auto1831B9E0_g = lv_pg;
    auto1831B9E0_var = -1;
    while (true) {
        auto1831B9E0_var = PlayerGroupNextPlayer(auto1831B9E0_g, auto1831B9E0_var);
        if (auto1831B9E0_var < 0) { break; }
        if ((PlayerType(auto1831B9E0_var) != c_playerTypeUser)) {
            PlayerGroupRemove(lv_pg, auto1831B9E0_var);
            continue;
        }

        lv_pos = CameraGetTarget(auto1831B9E0_var);
        libNtve_gf_CreateActorAtPoint("QueenSCBWEnsnare@Impact", lv_pos);
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimSetTimeScale BSD 50.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.001000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetZ");
        lv_actor[0][auto1831B9E0_var] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("DefilerSCBWDarkSwarm@Splat", lv_pos);
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimBracketStart BSD Birth Stand Death ContentPlayOnce");
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimSetTimeScale BSD 50.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.001000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetZ");
        lv_actor[1][auto1831B9E0_var] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint("DefilerSCBWPlague@ImpactModel", lv_pos);
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimSetTimeScale BSD 50.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.001000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetZ");
        lv_actor[2][auto1831B9E0_var] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("ReaverSCBWWeapon@Impact", lv_pos);
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimBracketStart BSD Birth Stand Death ContentPlayOnce");
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimSetTimeScale BSD 50.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.001000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetZ");
        lv_actor[3][auto1831B9E0_var] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("HighTemplarSCBWPsiStorm@Model", lv_pos);
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimBracketStart BSD Birth Stand Death ContentPlayOnce");
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimSetTimeScale BSD 50.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.001000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetZ");
        lv_actor[4][auto1831B9E0_var] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("DragoonSCBW@Death", lv_pos);
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimBracketStart BSD Birth Stand Death ContentPlayOnce");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.001000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetZ");
        lv_actor[5][auto1831B9E0_var] = libNtve_gf_ActorLastCreated();
    }
    Wait(0.13, c_timeGame);
    auto537193CD_g = lv_pg;
    auto537193CD_var = -1;
    while (true) {
        auto537193CD_var = PlayerGroupNextPlayer(auto537193CD_g, auto537193CD_var);
        if (auto537193CD_var < 0) { break; }
        autoB530066F_ae = (lv_actorCount - 1);
        lv_i = 0;
        for ( ; ( (autoB530066F_ai >= 0 && lv_i <= autoB530066F_ae) || (autoB530066F_ai < 0 && lv_i >= autoB530066F_ae) ) ; lv_i += autoB530066F_ai ) {
            ActorSend(lv_actor[lv_i][auto537193CD_var], "Destroy WhenReady");
        }
    }
    TriggerDestroy(TriggerGetCurrent());
    return true;
}

playergroup libSCEV_gf_HumanPlayers () {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_result;

    // Automatic Variable Declarations
    playergroup autoD9EA6CB5_g;

    // Variable Initialization
    lv_result = PlayerGroupEmpty();

    // Implementation
    autoD9EA6CB5_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD9EA6CB5_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeUser) && (PlayerStatus(lv_indexPlayer) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_result, lv_indexPlayer);
        }

    }
    return lv_result;
}

void libSCEV_gf_MinimapAllyViewCameraSnapPointersListUpdate (int lp_p) {
    // Variable Declarations
    int lv_i;
    playergroup lv_allies;

    // Automatic Variable Declarations
    int autoC2EE7628_ae;
    const int autoC2EE7628_ai = 1;

    // Variable Initialization
    lv_allies = PlayerGroupEmpty();

    // Implementation
    lv_allies = libNtve_gf_IntersectionOfPlayerGroups(PlayerGroupAlliance(c_playerGroupAlly, lp_p), libSCEV_gf_HumanPlayers());
    PlayerGroupRemove(lv_allies, lp_p);
    libSCEV_gv_minimapAllyViewCameraSnapPointersListLength[lp_p] = PlayerGroupCount(lv_allies);
    libSCEV_gv_minimapAllyViewCameraSnapPointersListPosition[lp_p] = 0;
    autoC2EE7628_ae = PlayerGroupCount(lv_allies);
    lv_i = 0;
    for ( ; ( (autoC2EE7628_ai >= 0 && lv_i <= autoC2EE7628_ae) || (autoC2EE7628_ai < 0 && lv_i >= autoC2EE7628_ae) ) ; lv_i += autoC2EE7628_ai ) {
        libSCEV_gv_minimapAllyViewCameraSnapPointersList[lp_p][lv_i] = PlayerGroupPlayer(lv_allies, lv_i);
    }
}

trigger auto_libSCEV_gf_MinimapAllyViewUpdateArea_Trigger = null;
region auto_libSCEV_gf_MinimapAllyViewUpdateArea_lp_region;

void libSCEV_gf_MinimapAllyViewUpdateArea (region lp_region) {
    auto_libSCEV_gf_MinimapAllyViewUpdateArea_lp_region = lp_region;

    if (auto_libSCEV_gf_MinimapAllyViewUpdateArea_Trigger == null) {
        auto_libSCEV_gf_MinimapAllyViewUpdateArea_Trigger = TriggerCreate("auto_libSCEV_gf_MinimapAllyViewUpdateArea_TriggerFunc");
    }

    TriggerExecute(auto_libSCEV_gf_MinimapAllyViewUpdateArea_Trigger, false, false);
}

bool auto_libSCEV_gf_MinimapAllyViewUpdateArea_TriggerFunc (bool testConds, bool runActions) {
    region lp_region = auto_libSCEV_gf_MinimapAllyViewUpdateArea_lp_region;

    // Automatic Variable Declarations
    // Implementation
    RegionPlayableMapSet(lp_region);
    Wait(0.0625, c_timeGame);
    libSCEV_gf_MinimapAllyViewRescale();
    return true;
}

void libSCEV_gf_MinimapAllyViewRescale () {
    // Variable Declarations
    const fixed lv_baseScale = 0.5;
    const fixed lv_baseMapSize = 108.0;
    fixed lv_mapScale;
    int lv_indexPlayer;
    int lv_jindexPlayer;

    // Automatic Variable Declarations
    playergroup auto8F8F5FE9_g;
    playergroup auto9657FE26_g;

    // Variable Initialization
    lv_mapScale = 0.5;

    // Implementation
    lv_mapScale = (lv_baseMapSize / MaxF(libNtve_gf_WidthOfRegion(RegionPlayableMap()), libNtve_gf_HeightOfRegion(RegionPlayableMap())));
    lv_mapScale = (lv_mapScale * lv_baseScale);
    auto8F8F5FE9_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto8F8F5FE9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto9657FE26_g = PlayerGroupAll();
        lv_jindexPlayer = -1;
        while (true) {
            lv_jindexPlayer = PlayerGroupNextPlayer(auto9657FE26_g, lv_jindexPlayer);
            if (lv_jindexPlayer < 0) { break; }
            PingSetScale(libSCEV_gv_minimapAllyViewPings[lv_indexPlayer][lv_jindexPlayer], lv_mapScale);
        }
    }
}

void libSCEV_gf_MinimapAllyViewEnableDisable (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        if ((PlayerGroupCount(PlayerGroupActive()) <= 2) && (PlayerGroupCount(PlayerGroupActive()) > 8)) {
            return ;
        }

        TriggerExecute(libSCEV_gt_MinimapAllyViewInit, true, true);
        libSCEV_gf_MinimapAllyViewRescale();
        TriggerEnable(libSCEV_gt_MinimapAllyViewCameraUpdate, true);
        TriggerEnable(libSCEV_gt_MinimapAllyViewCameraSnap, true);
        TriggerEnable(libSCEV_gt_MinimapAllyViewAllianceUpdate, true);
        TriggerExecute(libSCEV_gt_MinimapAllyViewAllianceUpdate, true, false);
        TriggerEnable(libSCEV_gt_MinimapAllyViewCameraSnap, true);
    }
    else {
        TriggerEnable(libSCEV_gt_MinimapAllyViewCameraUpdate, false);
        TriggerEnable(libSCEV_gt_MinimapAllyViewCameraSnap, false);
        TriggerEnable(libSCEV_gt_MinimapAllyViewAllianceUpdate, false);
        TriggerEnable(libSCEV_gt_MinimapAllyViewCameraSnap, false);
    }
}

void libSCEV_gf_RegisterCameraMoveEvent (trigger lp_trigger, int lp_playerId, int lp_cameraMoveReason) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventCameraMove(lp_trigger, lp_playerId, lp_cameraMoveReason);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: MineralWalls:Update
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MineralWallsUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestVisibleMineralWall;

    // Automatic Variable Declarations
    playergroup auto70AF68EC_g;
    int auto70AF68EC_var;
    unitgroup auto0CD3E6BD_g;
    int auto0CD3E6BD_u;
    unit auto0CD3E6BD_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(libSCEV_gv_mineralWallsGlobalMineralWalls, c_unitCountAlive) <= 0)) {
        libSCEV_gf_MineralWallsActivate(false);
        return true;
    }

    auto70AF68EC_g = PlayerGroupActive();
    auto70AF68EC_var = -1;
    while (true) {
        auto70AF68EC_var = PlayerGroupNextPlayer(auto70AF68EC_g, auto70AF68EC_var);
        if (auto70AF68EC_var < 0) { break; }
        if ((PlayerType(auto70AF68EC_var) == c_playerTypeComputer)) {
            auto0CD3E6BD_g = UnitGroup(null, auto70AF68EC_var, RegionPlayableMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSilenced - 32))), 0);
            auto0CD3E6BD_u = UnitGroupCount(auto0CD3E6BD_g, c_unitCountAll);
            for (;; auto0CD3E6BD_u -= 1) {
                auto0CD3E6BD_var = UnitGroupUnitFromEnd(auto0CD3E6BD_g, auto0CD3E6BD_u);
                if (auto0CD3E6BD_var == null) { break; }
                lv_closestVisibleMineralWall = UnitGroupClosestToPoint(libSCEV_gv_mineralWallsGlobalMineralWalls, UnitGetPosition(auto0CD3E6BD_var));
                if ((libNtve_gf_UnitIsVisibleToPlayer(lv_closestVisibleMineralWall, auto70AF68EC_var) == true) && (UnitCurrentWorkerCount(lv_closestVisibleMineralWall) <= 0) && (PointPathingCost(UnitGetPosition(auto0CD3E6BD_var), UnitGetPosition(lv_closestVisibleMineralWall)) <= 200)) {
                    libNtve_gf_AICast(auto0CD3E6BD_var, OrderTargetingUnit(null, lv_closestVisibleMineralWall));
                    break;
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MineralWallsUpdate_Init () {
    libSCEV_gt_MineralWallsUpdate = TriggerCreate("libSCEV_gt_MineralWallsUpdate_Func");
    TriggerEnable(libSCEV_gt_MineralWallsUpdate, false);
    TriggerAddEventTimePeriodic(libSCEV_gt_MineralWallsUpdate, RandomInt(30, 60), c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCEvo: Feature Init
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_SCEvoFeatureInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB31C4DE1_g;
    int autoB31C4DE1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSCEV_gf_SCEvoFeatureActive(libSCEV_ge_SCEvoFeatures_FractionalArmor) == false)) {
        libSCEV_gf_SCEvoActivateFeature(libSCEV_ge_SCEvoFeatures_FractionalArmor, true);
    }

    libSCEV_gf_InfiniteMoneyMapCheck();
    libSCEV_gf_MergeStatusEffectsInitialize();
    autoB31C4DE1_g = PlayerGroupActive();
    autoB31C4DE1_var = -1;
    while (true) {
        autoB31C4DE1_var = PlayerGroupNextPlayer(autoB31C4DE1_g, autoB31C4DE1_var);
        if (autoB31C4DE1_var < 0) { break; }
        libSCEV_gf_DisableClassicSkins(autoB31C4DE1_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_SCEvoFeatureInit_Init () {
    libSCEV_gt_SCEvoFeatureInit = TriggerCreate("libSCEV_gt_SCEvoFeatureInit_Func");
    TriggerAddEventMapInit(libSCEV_gt_SCEvoFeatureInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FractionalArmor:Add
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_FractionalArmorAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), libSCEV_gv_fractionalArmorFilter) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCEV_gf_FractionalArmorUpdate(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_FractionalArmorAdd_Init () {
    libSCEV_gt_FractionalArmorAdd = TriggerCreate("libSCEV_gt_FractionalArmorAdd_Func");
    TriggerEnable(libSCEV_gt_FractionalArmorAdd, false);
    TriggerAddEventUnitRegion(libSCEV_gt_FractionalArmorAdd, null, RegionEntireMap(), true);
    TriggerAddEventUnitProperty(libSCEV_gt_FractionalArmorAdd, null, c_unitPropLifeArmor);
    TriggerAddEventUnitProperty(libSCEV_gt_FractionalArmorAdd, null, c_unitPropShieldArmor);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FractionalArmor:Upgrade
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_FractionalArmorUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBBF6BE40_g;
    int autoBBF6BE40_u;
    unit autoBBF6BE40_var;

    // Conditions
    if (testConds) {
        if (!((StringContains(CatalogFieldValueGet(c_gameCatalogUpgrade, EventUpgradeName(), "EditorCategories", c_playerAny), "ArmorBonus", c_stringAnywhere, c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBBF6BE40_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), libSCEV_gv_fractionalArmorFilter, 0);
    autoBBF6BE40_u = UnitGroupCount(autoBBF6BE40_g, c_unitCountAll);
    for (;; autoBBF6BE40_u -= 1) {
        autoBBF6BE40_var = UnitGroupUnitFromEnd(autoBBF6BE40_g, autoBBF6BE40_u);
        if (autoBBF6BE40_var == null) { break; }
        libSCEV_gf_FractionalArmorUpdate(autoBBF6BE40_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_FractionalArmorUpgrade_Init () {
    libSCEV_gt_FractionalArmorUpgrade = TriggerCreate("libSCEV_gt_FractionalArmorUpgrade_Func");
    TriggerEnable(libSCEV_gt_FractionalArmorUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(libSCEV_gt_FractionalArmorUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FractionalArmor:UpdateTrigger
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_FractionalArmorUpdateTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_effect;
    unit lv_unit;
    int lv_sourcePlayer;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_effect = EventPlayerEffectUsed();
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetPlayer = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_unit, lv_targetPlayer, libSCEV_gv_fractionalArmorFilter) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitSource)) == true)) {
        lv_sourcePlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource));
        PlayerScoreValueSetFromFixed(lv_sourcePlayer, "SCBW_DamageFormula@DamageMultiplierDealt", (PlayerGetPropertyFixed(lv_sourcePlayer, c_playerPropDamageDealtPercent) / 100.0));
    }

    PlayerScoreValueSetFromFixed(lv_targetPlayer, "SCBW_DamageFormula@DamageMultiplierTaken", (PlayerGetPropertyFixed(lv_targetPlayer, c_playerPropDamageTakenPercent) / 100.0));
    libSCEV_gf_FractionalArmorUpdate(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_FractionalArmorUpdateTrigger_Init () {
    libSCEV_gt_FractionalArmorUpdateTrigger = TriggerCreate("libSCEV_gt_FractionalArmorUpdateTrigger_Func");
    TriggerEnable(libSCEV_gt_FractionalArmorUpdateTrigger, false);
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_FractionalArmorUpdateTrigger, c_playerAny, "SCBW_DamageFormula@FractionalArmorUpdate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: FractionalArmor:PlayerDamage
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_FractionalArmorPlayerDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoED29972D_g;
    int autoED29972D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoED29972D_g = PlayerGroupAll();
    autoED29972D_var = -1;
    while (true) {
        autoED29972D_var = PlayerGroupNextPlayer(autoED29972D_g, autoED29972D_var);
        if (autoED29972D_var < 0) { break; }
        libSCEV_gf_FractionalArmorUpdatePlayerDamage(autoED29972D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_FractionalArmorPlayerDamage_Init () {
    libSCEV_gt_FractionalArmorPlayerDamage = TriggerCreate("libSCEV_gt_FractionalArmorPlayerDamage_Func");
    TriggerEnable(libSCEV_gt_FractionalArmorPlayerDamage, false);
    TriggerAddEventGeneric(libSCEV_gt_FractionalArmorPlayerDamage, "PlayerDamageUpdate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: FractionalArmor:GodCheat
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_FractionalArmorGodCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libSCEV_gf_FractionalArmorUpdatePlayerDamage(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_FractionalArmorGodCheat_Init () {
    libSCEV_gt_FractionalArmorGodCheat = TriggerCreate("libSCEV_gt_FractionalArmorGodCheat_Func");
    TriggerEnable(libSCEV_gt_FractionalArmorGodCheat, false);
    TriggerAddEventCheatUsed(libSCEV_gt_FractionalArmorGodCheat, c_playerAny, c_gameCheatGod);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissChance:RevealTimerExpire
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MissChanceRevealTimerExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameDestroyEffects(RegionGetCenter(RegionEntireMap()), 512.0, 0, "SCBW_MissChance@AttackRevealArea");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MissChanceRevealTimerExpire_Init () {
    libSCEV_gt_MissChanceRevealTimerExpire = TriggerCreate("libSCEV_gt_MissChanceRevealTimerExpire_Func");
    TriggerEnable(libSCEV_gt_MissChanceRevealTimerExpire, false);
    TriggerAddEventTimer(libSCEV_gt_MissChanceRevealTimerExpire, libSCEV_gv_missChanceRevealTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissChance:RevealAttacker
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MissChanceRevealAttacker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_victim;
    int lv_victimPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_victim = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_victimPlayer = UnitGetOwner(lv_victim);

    // Conditions
    if (testConds) {
        if (!((CatalogFieldValueGet(c_gameCatalogEffect, EventPlayerEffectUsed(), "Visibility", c_playerAny) == "Visible"))) {
            return false;
        }

        if (!(((UnitIsValid(lv_source) && UnitIsValid(lv_victim)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(lv_source) != UnitGetOwner(lv_victim)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_source, lv_victimPlayer, UnitFilter(0, 0, (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), 0)) == true)) {
        if ((UnitFilterMatch(lv_source, lv_victimPlayer, UnitFilter(0, 0, (1 << c_targetFilterAir), 0)) == true) && (ValidatorExecute("SCBW_MissChance@Check", lv_source, lv_victim) == 2)) {
            PlayerCreateEffectPoint(lv_victimPlayer, "SCBW_MissChance@AttackRevealArea", UnitGetPosition(lv_source));
            libSCEV_gf_MissChanceRevealTimerStart();
        }
        else {
            if ((UnitFilterMatch(lv_source, lv_victimPlayer, UnitFilter((1 << c_targetFilterAir), 0, 0, 0)) == true)) {
                UnitBehaviorAddPlayer(lv_source, "SCBW_MissChance@AttackReveal", lv_victimPlayer, 1);
            }

        }
    }
    else {
        if ((UnitFilterMatch(lv_source, lv_victimPlayer, UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, 0, 0)) == true) && (UnitFilterMatch(lv_source, lv_victimPlayer, UnitFilter(0, 0, (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), 0)) == false)) {
            PlayerCreateEffectPoint(lv_victimPlayer, "SCBW_MissChance@AttackRevealArea", UnitGetPosition(lv_source));
            libSCEV_gf_MissChanceRevealTimerStart();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MissChanceRevealAttacker_Init () {
    libSCEV_gt_MissChanceRevealAttacker = TriggerCreate("libSCEV_gt_MissChanceRevealAttacker_Func");
    TriggerEnable(libSCEV_gt_MissChanceRevealAttacker, false);
    TriggerAddEventPlayerEffectUsedFromScope(libSCEV_gt_MissChanceRevealAttacker, c_playerAny, "CEffectDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissChance:Add
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MissChanceAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SCBW_MissChance", EventUnit(), 1);
    if ((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), 0)) == true) && (StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "EditorCategories", c_playerAny), "Destructible", c_stringAnywhere, c_stringNoCase) == false)) {
        UnitBehaviorAdd(EventUnit(), "SCBW_MissChance@ShrubCheck", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MissChanceAdd_Init () {
    libSCEV_gt_MissChanceAdd = TriggerCreate("libSCEV_gt_MissChanceAdd_Func");
    TriggerEnable(libSCEV_gt_MissChanceAdd, false);
    TriggerAddEventUnitRegion(libSCEV_gt_MissChanceAdd, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissChance:ShrubCheck
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MissChanceShrubCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnitImpact();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_target, UnitGetOwner(lv_target), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }

        if (!((!(((UnitHasBehavior2(lv_target, "SCBW_MissChance@Shrub") == true) || (UnitHasBehavior2(lv_target, "SCBW_MissChance@HighGroundShrub") == true)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((HasCustomCellAttribute(UnitGetPosition(lv_target), 1) == true)) {
        UnitBehaviorAdd(lv_target, "SCBW_MissChance@HighGroundShrub", lv_target, 1);
    }
    else {
        UnitBehaviorAdd(lv_target, "SCBW_MissChance@Shrub", lv_target, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MissChanceShrubCheck_Init () {
    libSCEV_gt_MissChanceShrubCheck = TriggerCreate("libSCEV_gt_MissChanceShrubCheck_Func");
    TriggerEnable(libSCEV_gt_MissChanceShrubCheck, false);
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_MissChanceShrubCheck, c_playerAny, "SCBW_MissChance@ShrubCheck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissChance:HighGroundRegionEnter
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MissChanceHighGroundRegionEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SCBW_MissChance@HighGroundFake") == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SCBW_MissChance@HighGroundFake", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MissChanceHighGroundRegionEnter_Init () {
    libSCEV_gt_MissChanceHighGroundRegionEnter = TriggerCreate("libSCEV_gt_MissChanceHighGroundRegionEnter_Func");
    TriggerEnable(libSCEV_gt_MissChanceHighGroundRegionEnter, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissChance:HighGroundRegionExit
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MissChanceHighGroundRegionExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SCBW_MissChance@HighGroundFake") == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "SCBW_MissChance@HighGroundFake", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MissChanceHighGroundRegionExit_Init () {
    libSCEV_gt_MissChanceHighGroundRegionExit = TriggerCreate("libSCEV_gt_MissChanceHighGroundRegionExit_Func");
    TriggerEnable(libSCEV_gt_MissChanceHighGroundRegionExit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Legacy:UnitSwap
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_LegacyUnitSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_link;
    string lv_replaceLink;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_link = UnitGetType(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_u, UnitGetOwner(lv_u), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_u, libNtve_gf_Print(("Found " + (UnitGetType(lv_u)) + "#" + IntToString(UnitGetTag(lv_u)) + " Unit at [" + libNtve_gf_ConvertXYToString(Trunc(PointGetX(UnitGetPosition(lv_u))), Trunc(PointGetY(UnitGetPosition(lv_u)))) + "] ")));
    if ((libSCEV_gv_legacyUnitSwapErrorLogOnly == true)) {
        return true;
    }

    // Replace Links
    // Protoss
    if (lv_link == "Nexus")             { lv_replaceLink = "NexusSCBW"; }
    else if (lv_link == "Pylon")        { lv_replaceLink = "PylonSCBW"; }
    else if (lv_link == "Assimilator")  { lv_replaceLink = "AssimilatorSCBW"; }
    else if (lv_link == "AssimilatorRich")  { lv_replaceLink = "AssimilatorSCBW@Rich"; }
    else if (lv_link == "Gateway")      { lv_replaceLink = "GatewaySCBW"; }
    else if (lv_link == "Forge")        { lv_replaceLink = "ForgeSCBW"; }
    else if (lv_link == "CyberneticsCore")  { lv_replaceLink = "CyberneticsCoreSCBW"; }
    else if (lv_link == "ShieldBattery")    { lv_replaceLink = "ShieldBatterySCBW"; }
    else if (lv_link == "PhotonCannon")     { lv_replaceLink = "PhotonCannonSCBW"; }
    else if (lv_link == "RoboticsFacility") { lv_replaceLink = "RoboticsFacilitySCBW"; }
    else if (lv_link == "RoboticsBay")      { lv_replaceLink = "RoboticsBaySCBW"; }
    else if (lv_link == "TwilightCouncil")  { lv_replaceLink = "CitadelOfAdunSCBW"; }
    else if (lv_link == "TemplarArchive")   { lv_replaceLink = "TemplarArchiveSCBW"; }
    else if (lv_link == "Stargate")     { lv_replaceLink = "StargateSCBW"; }
    else if (lv_link == "FleetBeacon")  { lv_replaceLink = "FleetBeaconSCBW"; }
    else if (lv_link == "Probe")        { lv_replaceLink = "ProbeSCBW"; }
    else if (lv_link == "Zealot")       { lv_replaceLink = "ZealotSCBW"; }
    else if (lv_link == "Dragoon")      { lv_replaceLink = "DragoonSCBW"; }
    else if (lv_link == "HighTemplar")  { lv_replaceLink = "HighTemplarSCBW"; }
    else if (lv_link == "Archon")       { lv_replaceLink = "ArchonSCBW"; }
    else if (lv_link == "DarkTemplar")  { lv_replaceLink = "DarkTemplarSCBW"; }
    else if (lv_link == "DarkArchon")   { lv_replaceLink = "DarkArchonSCBW"; }
    else if (lv_link == "WarpPrism")    { lv_replaceLink = "ShuttleSCBW"; }
    else if (lv_link == "Reaver")       { lv_replaceLink = "ReaverSCBW"; }
    else if (lv_link == "Observer")     { lv_replaceLink = "ObserverSCBW"; }
    else if (lv_link == "Scout")        { lv_replaceLink = "ScoutSCBW"; }
    else if (lv_link == "CorsairMP")    { lv_replaceLink = "CorsairSCBW"; }
    else if (lv_link == "Carrier")      { lv_replaceLink = "CarrierSCBW"; }
    else if (lv_link == "ArbiterMP")    { lv_replaceLink = "ArbiterSCBW"; }
    // Terran
    else if (lv_link == "SCV")          { lv_replaceLink = "SCVSCBW"; }
    else if (lv_link == "Marine")       { lv_replaceLink = "MarineSCBW"; }
    else if (lv_link == "Firebat")      { lv_replaceLink = "FirebatSCBW"; }
    else if (lv_link == "Medic")        { lv_replaceLink = "MedicSCBW"; }
    else if (lv_link == "Ghost")        { lv_replaceLink = "GhostSCBW"; }
    else if (lv_link == "Vulture")      { lv_replaceLink = "VultureSCBW"; }
    else if (lv_link == "SiegeTank")    { lv_replaceLink = "SiegeTankSCBW"; }
    else if (lv_link == "SiegeTankSieged"){ lv_replaceLink = "SiegeTankSiegedSCBW"; }
    else if (lv_link == "Goliath")      { lv_replaceLink = "GoliathSCBW"; }
    else if (lv_link == "SpiderMine")   { lv_replaceLink = "SpiderMineSCBW"; }
    else if (lv_link == "SpiderMineBurrowed")   { lv_replaceLink = "SpiderMineSCBW@Burrowed"; }
    else if (lv_link == "Wraith")       { lv_replaceLink = "WraithSCBW"; }
    else if (lv_link == "Medivac")      { lv_replaceLink = "DropshipSCBW"; }
    else if (lv_link == "ScienceVessel"){ lv_replaceLink = "ScienceVesselSCBW"; }
    else if (lv_link == "Battlecruiser")  { lv_replaceLink = "BattlecruiserSCBW"; }
    else if (lv_link == "CommandCenter")  { lv_replaceLink = "CommandCenterSCBW"; }
    else if (lv_link == "Refinery")     { lv_replaceLink = "RefinerySCBW"; }
    else if (lv_link == "SupplyDepot")  { lv_replaceLink = "SupplyDepotSCBW"; }
    else if (lv_link == "Barracks")  { lv_replaceLink = "BarracksSCBW"; }
    else if (lv_link == "BarracksFlying")  { lv_replaceLink = "BarracksFlyingSCBW"; }
    else if (lv_link == "EngineeringBay")  { lv_replaceLink = "EngineeringBaySCBW"; }
    else if (lv_link == "Factory")  { lv_replaceLink = "FactorySCBW"; }
    else if (lv_link == "Starport")  { lv_replaceLink = "StarportSCBW"; }
    else if (lv_link == "Bunker")  { lv_replaceLink = "BunkerSCBW"; }
    else if (lv_link == "MissileTurret")  { lv_replaceLink = "MissileTurretSCBW"; }
    else if (lv_link == "Armory")  { lv_replaceLink = "ArmorySCBW"; }
    else if (lv_link == "FusionCore")  { lv_replaceLink = "FusionCoreSCBW"; }
    // Zerg
    else if (lv_link == "Hatchery")  { lv_replaceLink = "HatcherySCBW"; }
    else if (lv_link == "Lair")  { lv_replaceLink = "LairSCBW"; }
    else if (lv_link == "Hive")  { lv_replaceLink = "HiveSCBW"; }
    else if (lv_link == "SporeCrawler")  { lv_replaceLink = "SporeColonySCBW"; }
    else if (lv_link == "SpineCrawler")  { lv_replaceLink = "SunkenColonySCBW"; }
    else if (lv_link == "Extractor")  { lv_replaceLink = "ExtractorSCBW"; }
    else if (lv_link == "ExtractorRich")  { lv_replaceLink = "ExtractorSCBW@Rich"; }
    else if (lv_link == "SpawningPool")  { lv_replaceLink = "SpawningPoolSCBW"; }
    else if (lv_link == "EvolutionChamber")  { lv_replaceLink = "EvolutionChamberSCBW"; }
    else if (lv_link == "HydraliskDen")  { lv_replaceLink = "HydraliskDenSCBW"; }
    else if (lv_link == "Spire")  { lv_replaceLink = "SpireSCBW"; }
    else if (lv_link == "GreaterSpire")  { lv_replaceLink = "GreaterSpireSCBW"; }
    else if (lv_link == "InfestationPit")  { lv_replaceLink = "QueensNestSCBW"; }
    else if (lv_link == "RoachWarren")  { lv_replaceLink = "DefilerMoundSCBW"; }
    else if (lv_link == "NydusCanal")  { lv_replaceLink = "NydusCanalSCBW"; }
    else if (lv_link == "Larva")  { lv_replaceLink = "LarvaSCBW"; }
    else if (lv_link == "Drone")  { lv_replaceLink = "DroneSCBW"; }
    else if (lv_link == "Zergling")  { lv_replaceLink = "ZerglingSCBW"; }
    else if (lv_link == "Overlord")  { lv_replaceLink = "OverlordSCBW"; }
    else if (lv_link == "Hydralisk")  { lv_replaceLink = "HydraliskSCBW"; }
    else if (lv_link == "Mutalisk")  { lv_replaceLink = "MutaliskSCBW"; }
    else if (lv_link == "Scourge")  { lv_replaceLink = "ScourgeSCBW"; }
    else if (lv_link == "QueenMP")  { lv_replaceLink = "QueenSCBW"; }
    else if (lv_link == "Ultralisk")  { lv_replaceLink = "UltraliskSCBW"; }
    else if (lv_link == "DefilerMP")  { lv_replaceLink = "DefilerSCBW"; }
    else if (lv_link == "Broodling")  { lv_replaceLink = "BroodlingSCBW"; }
    else if (lv_link == "InfestedTerran")  { lv_replaceLink = "InfestedTerranSCBW"; }
    else {
    }
    if ((lv_replaceLink == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_SCEV_3E8673A0"), false);
    }
    else {
        libNtve_gf_ReplaceUnit(lv_u, lv_replaceLink, libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_LegacyUnitSwap_Init () {
    libSCEV_gt_LegacyUnitSwap = TriggerCreate("libSCEV_gt_LegacyUnitSwap_Func");
    TriggerEnable(libSCEV_gt_LegacyUnitSwap, false);
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_LegacyUnitSwap, c_playerAny, "SCBWUnitSwapDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Legacy:Refund
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_LegacyRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    int[4] lv_cost;
    int lv_i;
    int lv_index;
    int lv_infoCount;
    string lv_originUnit;
    string lv_targetUnit;
    string lv_ability;
    int lv_count;
    fixed lv_fraction;

    // Automatic Variable Declarations
    int auto5B7533DD_ae;
    const int auto5B7533DD_ai = 1;
    const int auto0D444168_ae = 3;
    const int auto0D444168_ai = 1;
    const int autoFED5C6F9_ae = 3;
    const int autoFED5C6F9_ai = 1;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_ability = AbilityCommandGetAbility(EventUnitAbility());
    lv_count = 1;
    lv_fraction = -1.0;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((AbilityClass(lv_ability) == c_classIdCAbilMorph) || (AbilityClass(lv_ability) == c_classIdCAbilTrain) || (AbilityClass(lv_ability) == c_classIdCAbilResearch)))) {
            return false;
        }

        if (!((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "AbilityCategories[" + IntToString(0) + "]", c_playerAny) == "1"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true)) {
        lv_fraction = -0.75;
    }

    lv_originUnit = UnitGetType(EventUnit());
    lv_infoCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", c_playerAny);
    if ((AbilityClass(lv_ability) == c_classIdCAbilMorph)) {
        lv_targetUnit = (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString((lv_infoCount - 1)) + "].Unit", c_playerAny));
    }
    else if (((AbilityClass(lv_ability) == c_classIdCAbilTrain) || (AbilityClass(lv_ability) == c_classIdCAbilResearch))) {
        auto5B7533DD_ae = (lv_infoCount - 1);
        lv_i = 0;
        for ( ; ( (auto5B7533DD_ai >= 0 && lv_i <= auto5B7533DD_ae) || (auto5B7533DD_ai < 0 && lv_i >= auto5B7533DD_ae) ) ; lv_i += auto5B7533DD_ai ) {
            if ((EventUnitAbility() == AbilityCommand(lv_ability, lv_i))) {
                if ((AbilityClass(lv_ability) == c_classIdCAbilResearch)) {
                    lv_index = lv_i;
                    lv_fraction = -0.25;
                }
                else {
                    lv_count = CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Unit", c_playerAny);
                    lv_targetUnit = (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Unit[" + IntToString(0) + "]", c_playerAny));
                }
                break;
            }

        }
        if ((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "AbilityCategories[" + IntToString(2) + "]", c_playerAny) == "1")) {
            UnitKill(EventUnit());
        }

    }
    if ((AbilityClass(lv_ability) == c_classIdCAbilResearch)) {
        lv_i = 0;
        for ( ; ( (auto0D444168_ai >= 0 && lv_i <= auto0D444168_ae) || (auto0D444168_ai < 0 && lv_i >= auto0D444168_ae) ) ; lv_i += auto0D444168_ai ) {
            lv_cost[lv_i] += CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_index) + "].Resource[" + IntToString(lv_i) + "]", lv_owner);
            CatalogFieldValueSet(c_gameCatalogEffect, "DummyResourceSpend", "Cost.Resource[" + IntToString(lv_i) + "]", lv_owner, IntToString(FixedToInt((lv_cost[lv_i] * lv_fraction))));
        }
    }
    else {
        lv_i = 0;
        for ( ; ( (autoFED5C6F9_ai >= 0 && lv_i <= autoFED5C6F9_ae) || (autoFED5C6F9_ai < 0 && lv_i >= autoFED5C6F9_ae) ) ; lv_i += autoFED5C6F9_ai ) {
            lv_cost[lv_i] += ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_targetUnit, "CostResource[" + IntToString(lv_i) + "]", lv_owner) * lv_count) - CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_originUnit, "CostResource[" + IntToString(lv_i) + "]", lv_owner));
            CatalogFieldValueSet(c_gameCatalogEffect, "DummyResourceSpend", "Cost.Resource[" + IntToString(lv_i) + "]", lv_owner, IntToString(FixedToInt((lv_cost[lv_i] * lv_fraction))));
        }
    }
    PlayerCreateEffectUnit(lv_owner, "DummyResourceSpend", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_LegacyRefund_Init () {
    libSCEV_gt_LegacyRefund = TriggerCreate("libSCEV_gt_LegacyRefund_Func");
    TriggerEnable(libSCEV_gt_LegacyRefund, false);
    TriggerAddEventUnitAbility(libSCEV_gt_LegacyRefund, null, null, c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LegacyCheat:CheatTracker
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_LegacyCheatCheatTracker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_cheat;
    string lv_stringRemain;
    string lv_match;
    int lv_cheatIndex;
    string lv_param;
    string lv_param2;

    // Automatic Variable Declarations
    int auto5838152C_val;

    // Variable Initialization
    lv_cheat = StringCase(EventChatMessage(false), false);
    lv_stringRemain = "";
    lv_match = "";
    lv_param = "";
    lv_param2 = "";

    // Conditions
    if (testConds) {
        if (!((libSCEV_gv_cheatsActive == true))) {
            return false;
        }

        if (!((GameIsOnline() == false))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }

        if (!((lv_cheat != ""))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringContains(lv_cheat, "operation cwal", c_stringBegin, c_stringNoCase) == true)) {
        lv_match = "operation cwal";
        lv_cheatIndex = 1;
    }
    else if ((StringContains(lv_cheat, "instantbuild", c_stringBegin, c_stringNoCase) == true)) {
        lv_match = "instantbuild";
        lv_cheatIndex = 1;
    }
    else if (true) {
        return false;
    }
    lv_param = TriggerEventParamName(libSCEV_gf_LegacyCheatCheatToString(lv_cheatIndex), "PlayerParam");
    lv_param2 = TriggerEventParamName(libSCEV_gf_LegacyCheatCheatToString(lv_cheatIndex), "TriggeringPlayer");
    DataTableSetInt(false, lv_param, EventPlayer());
    DataTableSetInt(false, lv_param2, EventPlayer());
    lv_stringRemain = StringReplaceWord(lv_cheat, lv_match, "", c_stringReplaceAll, c_stringNoCase);
    auto5838152C_val = lv_cheatIndex;
    if (auto5838152C_val == 1) {
        if ((StringLength(lv_stringRemain) > 0)) {
            DataTableSetInt(false, lv_param, StringToInt(StringWord(lv_stringRemain, 1)));
        }

        TriggerSendEvent(libSCEV_gf_LegacyCheatCheatToString(lv_cheatIndex));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_LegacyCheatCheatTracker_Init () {
    libSCEV_gt_LegacyCheatCheatTracker = TriggerCreate("libSCEV_gt_LegacyCheatCheatTracker_Func");
    TriggerEnable(libSCEV_gt_LegacyCheatCheatTracker, false);
    TriggerAddEventChatMessage(libSCEV_gt_LegacyCheatCheatTracker, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OperationCwal:Activate
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_OperationCwalActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_triggeringPlayer;
    text lv_onOff;
    int lv_i;

    // Automatic Variable Declarations
    const int autoAD16DA14_ae = 15;
    const int autoAD16DA14_ai = 1;
    unitgroup auto4F590E5F_g;
    int auto4F590E5F_u;
    unit auto4F590E5F_var;

    // Variable Initialization
    lv_player = DataTableGetInt(false, TriggerEventParamName(libSCEV_gf_LegacyCheatCheatToString(1), "PlayerParam"));
    lv_triggeringPlayer = DataTableGetInt(false, TriggerEventParamName(libSCEV_gf_LegacyCheatCheatToString(1), "TriggeringPlayer"));

    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryPublic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCEV_gv_operationCwalActive[lv_player] = !(libSCEV_gv_operationCwalActive[lv_player]);
    if ((libSCEV_gv_operationCwalActive[lv_player] == true)) {
        lv_onOff = StringExternal("Param/Value/lib_SCEV_F8267F6E");
    }
    else {
        lv_onOff = StringExternal("Param/Value/lib_SCEV_19B4CC20");
    }
    TextExpressionSetToken("Param/Expression/lib_SCEV_EA340C89", "B", lv_onOff);
    TextExpressionSetToken("Param/Expression/lib_SCEV_EA340C89", "A", PlayerName(lv_player));
    UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_SCEV_EA340C89"));
    lv_i = 0;
    for ( ; ( (autoAD16DA14_ai >= 0 && lv_i <= autoAD16DA14_ae) || (autoAD16DA14_ai < 0 && lv_i >= autoAD16DA14_ae) ) ; lv_i += autoAD16DA14_ai ) {
        if ((libSCEV_gv_operationCwalActive[lv_i] == true)) {
            TriggerEnable(libSCEV_gt_OperationCwalTrain, true);
            TriggerEnable(libSCEV_gt_OperationCwalConstuction, true);
            TriggerEnable(libSCEV_gt_OperationCwalMorph, true);
            break;
        }

        if ((lv_i >= 15)) {
            TriggerEnable(libSCEV_gt_OperationCwalTrain, false);
            TriggerEnable(libSCEV_gt_OperationCwalConstuction, false);
            TriggerEnable(libSCEV_gt_OperationCwalMorph, false);
        }

    }
    if ((libSCEV_gv_operationCwalActive[lv_player] == true)) {
        auto4F590E5F_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4F590E5F_u = UnitGroupCount(auto4F590E5F_g, c_unitCountAll);
        for (;; auto4F590E5F_u -= 1) {
            auto4F590E5F_var = UnitGroupUnitFromEnd(auto4F590E5F_g, auto4F590E5F_u);
            if (auto4F590E5F_var == null) { break; }
            if ((ValidatorExecute("SCBW_IsMorphing", auto4F590E5F_var, auto4F590E5F_var) == 0)) {
                libSCEV_gf_OperationCwal(auto4F590E5F_var, libSCEV_ge_OperationCwal_Type_Morph);
            }
            else if ((UnitFilterMatch(auto4F590E5F_var, lv_player, UnitFilter(0, (1 << (c_targetFilterUnderConstruction - 32)), 0, 0)) == true)) {
                libSCEV_gf_OperationCwal(auto4F590E5F_var, libSCEV_ge_OperationCwal_Type_Construction);
            }
            else if ((UnitFilterMatch(auto4F590E5F_var, lv_player, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
                libSCEV_gf_OperationCwal(auto4F590E5F_var, libSCEV_ge_OperationCwal_Type_Normal);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_OperationCwalActivate_Init () {
    libSCEV_gt_OperationCwalActivate = TriggerCreate("libSCEV_gt_OperationCwalActivate_Func");
    libSCEV_gf_LegacyCheatEvent(libSCEV_gt_OperationCwalActivate, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OperationCwal:Train
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_OperationCwalTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSCEV_gv_operationCwalActive[UnitGetOwner(EventUnit())] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCEV_gf_OperationCwal(EventUnit(), libSCEV_ge_OperationCwal_Type_Normal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_OperationCwalTrain_Init () {
    libSCEV_gt_OperationCwalTrain = TriggerCreate("libSCEV_gt_OperationCwalTrain_Func");
    TriggerEnable(libSCEV_gt_OperationCwalTrain, false);
    TriggerAddEventUnitResearchProgress(libSCEV_gt_OperationCwalTrain, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(libSCEV_gt_OperationCwalTrain, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OperationCwal:Constuction
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_OperationCwalConstuction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSCEV_gv_operationCwalActive[UnitGetOwner(EventUnitProgressUnit())] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCEV_gf_OperationCwal(EventUnitProgressUnit(), libSCEV_ge_OperationCwal_Type_Construction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_OperationCwalConstuction_Init () {
    libSCEV_gt_OperationCwalConstuction = TriggerCreate("libSCEV_gt_OperationCwalConstuction_Func");
    TriggerEnable(libSCEV_gt_OperationCwalConstuction, false);
    TriggerAddEventUnitConstructProgress(libSCEV_gt_OperationCwalConstuction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OperationCwal:Morph
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_OperationCwalMorph_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libSCEV_gv_operationCwalActive[UnitGetOwner(EventUnit())] == true))) {
            return false;
        }

        if (!((AbilityClass(AbilityCommandGetAbility(EventUnitAbility())) == c_classIdCAbilMorph))) {
            return false;
        }

        if (!((CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(EventUnitAbility()), "AbilityCategories[" + IntToString(3) + "]", c_playerAny) == "1"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCEV_gf_OperationCwal(EventUnit(), libSCEV_ge_OperationCwal_Type_Morph);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_OperationCwalMorph_Init () {
    libSCEV_gt_OperationCwalMorph = TriggerCreate("libSCEV_gt_OperationCwalMorph_Func");
    TriggerEnable(libSCEV_gt_OperationCwalMorph, false);
    TriggerAddEventUnitAbility(libSCEV_gt_OperationCwalMorph, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InfiniteMoneyMap:Trigger
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_InfiniteMoneyMapTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SCVSCBW") || (UnitGetType(EventUnit()) == "ProbeSCBW") || (UnitGetType(EventUnit()) == "DroneSCBW")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSCEV_gf_InfiniteMoneyMapAction(libNtve_gf_ConvertUnitToUnitGroup(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_InfiniteMoneyMapTrigger_Init () {
    libSCEV_gt_InfiniteMoneyMapTrigger = TriggerCreate("libSCEV_gt_InfiniteMoneyMapTrigger_Func");
    TriggerEnable(libSCEV_gt_InfiniteMoneyMapTrigger, false);
    TriggerAddEventUnitRegion(libSCEV_gt_InfiniteMoneyMapTrigger, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MimicCheck:StorePlayerIndex
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MimicCheckStorePlayerIndex_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup autoDF838816_g;
    int autoDF838816_u;
    unit autoDF838816_var;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ug = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 12.375), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF838816_g = lv_ug;
    autoDF838816_u = UnitGroupCount(autoDF838816_g, c_unitCountAll);
    for (;; autoDF838816_u -= 1) {
        autoDF838816_var = UnitGroupUnitFromEnd(autoDF838816_g, autoDF838816_u);
        if (autoDF838816_var == null) { break; }
        if ((UnitHasBehavior2(autoDF838816_var, "ChangelingDisguisePlayerIndex") == false) && (ValidatorExecute("TargetIsChangelingSCBW", autoDF838816_var, autoDF838816_var) == 0) && (UnitHasBehavior2(autoDF838816_var, "ChangelingDisable") == true)) {
            UnitBehaviorAdd(autoDF838816_var, "ChangelingDisguisePlayerIndex", autoDF838816_var, 1);
            UnitBehaviorEffectTreeSetUserData(autoDF838816_var, "ChangelingDisguisePlayerIndex", "Player", lv_owner);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MimicCheckStorePlayerIndex_Init () {
    libSCEV_gt_MimicCheckStorePlayerIndex = TriggerCreate("libSCEV_gt_MimicCheckStorePlayerIndex_Func");
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_MimicCheckStorePlayerIndex, c_playerAny, "DisguiseEx3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MimicCheck:SpiderMine
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MimicCheckSpiderMine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_target, "ChangelingDisguisePlayerIndex") == true)) {
        lv_playerIndex = FixedToInt(UnitBehaviorEffectTreeUserData(lv_target, "ChangelingDisguisePlayerIndex", "Player"));
        if ((UnitFilterMatch(EventPlayerEffectUsedUnit(c_effectUnitSource), lv_playerIndex, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false)) {
            UnitBehaviorAdd(lv_target, "SpiderMineSCBWWeapon@MimicDisable", EventPlayerEffectUsedUnit(c_effectUnitSource), 1);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MimicCheckSpiderMine_Init () {
    libSCEV_gt_MimicCheckSpiderMine = TriggerCreate("libSCEV_gt_MimicCheckSpiderMine_Func");
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_MimicCheckSpiderMine, c_playerAny, "SpiderMineSCBWWeapon@MimicCheck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReaverPathing:Check
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_ReaverPathingCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_attacker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!(((UnitIsValid(lv_attacker) && UnitIsValid(lv_target)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AIPathingCostMap(UnitGetPosition(lv_attacker), UnitGetPosition(lv_target)) <= -1)) {
        UnitBehaviorAdd(lv_attacker, "ReaverSCBWWeapon@LaunchNoPath", lv_target, 1);
    }

    UnitCreateEffectUnit(lv_attacker, "ReaverSCBWWeapon@LaunchSwitch", lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_ReaverPathingCheck_Init () {
    libSCEV_gt_ReaverPathingCheck = TriggerCreate("libSCEV_gt_ReaverPathingCheck_Func");
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_ReaverPathingCheck, c_playerAny, "ReaverSCBWWeapon@Launch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReaverPathing:Chase
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_ReaverPathingChase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_order = UnitOrder(EventUnit(), 0);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }

        if (!((OrderGetAbilityCommand(lv_order) == EventUnitAbility()))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdAutoQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "ReaverSCBWWeapon@ChaseSwitchNoReset", lv_target);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_ReaverPathingChase_Init () {
    libSCEV_gt_ReaverPathingChase = TriggerCreate("libSCEV_gt_ReaverPathingChase_Func");
    TriggerAddEventUnitAbility(libSCEV_gt_ReaverPathingChase, null, AbilityCommand("ReaverSCBWWeapon@Attack", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MergeStatusEffects:Track
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MergeStatusEffectsTrack_Func (bool testConds, bool runActions) {
    int init_i;
    int init_j;

    // Variable Declarations
    const int lv_c_buffCap = 63;
    string lv_buffList;
    string[lv_c_buffCap + 1] lv_buffListBuffs;
    string[lv_c_buffCap + 1][2] lv_buff;
    fixed[lv_c_buffCap + 1][2] lv_buffDuration;
    int[lv_c_buffCap + 1][2] lv_buffOrigin;
    string[lv_c_buffCap + 1][2] lv_buffMisc;
    unit[2] lv_u;
    unit lv_otherUnit;
    string lv_iBuff;
    int lv_k;
    int lv_i;
    int lv_j;
    int lv_other;
    fixed lv_otherDuration;
    bool lv_hasBuffs;
    string lv_buffListBuff;
    fixed lv_buffListDuration;
    int lv_buffListOrigin;
    string lv_buffListMisc;
    int lv_buffListCounter;
    bool lv_skip;

    // Automatic Variable Declarations
    const int auto00556874_ae = 1;
    const int auto00556874_ai = 1;
    unit autoD131F5B6_u;
    int autoD131F5B6_i;
    const int autoA1A8384B_ae = 1;
    const int autoA1A8384B_ai = 1;
    const int auto0AA25D57_ae = lv_c_buffCap;
    const int auto0AA25D57_ai = 1;
    int auto6A44789D_ae;
    const int auto6A44789D_ai = 1;

    // Variable Initialization
    lv_buffList = "";
    for (init_i = 0; init_i <= lv_c_buffCap; init_i += 1) {
        lv_buffListBuffs[init_i] = "";
    }
    for (init_i = 0; init_i <= lv_c_buffCap; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            lv_buff[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= lv_c_buffCap; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            lv_buffOrigin[init_i][init_j] = -1;
        }
    }
    for (init_i = 0; init_i <= lv_c_buffCap; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            lv_buffMisc[init_i][init_j] = "?";
        }
    }
    lv_buffListBuff = "";
    lv_buffListOrigin = -1;
    lv_buffListMisc = "?";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u[0] = EventUnit();
    lv_u[1] = EventUnitTargetUnit();
    lv_k = 0;
    for ( ; ( (auto00556874_ai >= 0 && lv_k <= auto00556874_ae) || (auto00556874_ai < 0 && lv_k >= auto00556874_ae) ) ; lv_k += auto00556874_ai ) {
        lv_i = 0;
        autoD131F5B6_u = lv_u[lv_k];
        autoD131F5B6_i = 1;
        for ( ; autoD131F5B6_i <= UnitBehaviorCountAll(autoD131F5B6_u) ; autoD131F5B6_i += BoolToInt(lv_iBuff == UnitBehaviorGet(autoD131F5B6_u, autoD131F5B6_i)) ) {
            lv_iBuff = UnitBehaviorGet(autoD131F5B6_u, autoD131F5B6_i);
            if ((libSCEV_gf_MergeStatusEffectsBuffTransferrable(lv_iBuff) == true)) {
                lv_hasBuffs = true;
                lv_buff[lv_i][lv_k] = (lv_iBuff);
                lv_buffDuration[lv_i][lv_k] = UnitBehaviorDuration(lv_u[lv_k], lv_iBuff);
                lv_buffOrigin[lv_i][lv_k] = UnitBehaviorEffectPlayer(lv_u[lv_k], lv_iBuff, c_effectPlayerCaster, 0);
                lv_buffMisc[lv_i][lv_k] = libSCEV_gf_MergeStatusEffectsMiscDataGet(lv_iBuff, lv_u[lv_k]);
                lv_i += 1;
            }

        }
    }
    if ((lv_hasBuffs == false)) {
        return true;
    }

    lv_k = 0;
    for ( ; ( (autoA1A8384B_ai >= 0 && lv_k <= autoA1A8384B_ae) || (autoA1A8384B_ai < 0 && lv_k >= autoA1A8384B_ae) ) ; lv_k += autoA1A8384B_ai ) {
        if (lv_other >= 1) {
            lv_other = 0;
        }
        else {
            lv_other = lv_other + 1;
        }
        lv_i = 0;
        for ( ; ( (auto0AA25D57_ai >= 0 && lv_i <= auto0AA25D57_ae) || (auto0AA25D57_ai < 0 && lv_i >= auto0AA25D57_ae) ) ; lv_i += auto0AA25D57_ai ) {
            lv_skip = false;
            lv_iBuff = (lv_buff[lv_i][lv_k]);
            if (((lv_iBuff == "") || (lv_iBuff == null))) {
                break;
            }

            auto6A44789D_ae = (lv_buffListCounter - 1);
            lv_j = 0;
            for ( ; ( (auto6A44789D_ai >= 0 && lv_j <= auto6A44789D_ae) || (auto6A44789D_ai < 0 && lv_j >= auto6A44789D_ae) ) ; lv_j += auto6A44789D_ai ) {
                if ((lv_buff[lv_i][lv_k] == lv_buffListBuffs[lv_j])) {
                    lv_skip = true;
                    break;
                }

            }
            if ((lv_skip == true)) {
                continue;
            }

            lv_buffListBuff = lv_buff[lv_i][lv_k];
            lv_buffListDuration = lv_buffDuration[lv_i][lv_k];
            lv_buffListOrigin = lv_buffOrigin[lv_i][lv_k];
            lv_buffListMisc = lv_buffMisc[lv_i][lv_k];
            if ((UnitHasBehavior2(lv_u[lv_other], lv_iBuff) == true)) {
                lv_otherDuration = UnitBehaviorDuration(lv_u[lv_other], lv_iBuff);
                if ((lv_buffDuration[lv_i][lv_k] < lv_otherDuration)) {
                    lv_buffListBuff = (lv_iBuff);
                    lv_buffListDuration = lv_otherDuration;
                    lv_buffListOrigin = UnitBehaviorEffectPlayer(lv_u[lv_other], lv_iBuff, c_effectPlayerCaster, 0);
                    lv_buffListMisc = libSCEV_gf_MergeStatusEffectsMiscDataGet(lv_iBuff, lv_u[lv_other]);
                }

            }

            lv_buffListBuffs[lv_buffListCounter] = lv_buffListBuff;
            lv_buffList = (lv_buffList + lv_buffListBuff + "|" + FixedToString(lv_buffListDuration, 1) + "|" + IntToString(lv_buffListOrigin) + "|" + lv_buffListMisc + " ");
            lv_buffListCounter += 1;
        }
    }
    DataTableSetString(true, "MergeBuffList", lv_buffList);
    DataTableSetInt(true, "MergeBuffCount", lv_buffListCounter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MergeStatusEffectsTrack_Init () {
    libSCEV_gt_MergeStatusEffectsTrack = TriggerCreate("libSCEV_gt_MergeStatusEffectsTrack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MergeStatusEffects:Begin
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MergeStatusEffectsBegin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buffList;
    string lv_currBuff;
    unit lv_mergeUnit;
    int lv_origin;
    string lv_buff;
    int lv_wordIndex;
    int lv_buffCount;
    string lv_currWord;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buffList = "";
    lv_currBuff = "";
    lv_mergeUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_currWord = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buffList = DataTableGetString(true, "MergeBuffList");
    DataTableValueRemove(true, "MergeBuffList");
    lv_buffCount = DataTableGetInt(true, "MergeBuffCount");
    DataTableValueRemove(true, "MergeBuffCount");
    if ((lv_buffList == null) && (lv_buffList == "")) {
        return true;
    }

    lv_wordIndex = 1;
    while ((lv_wordIndex <= lv_buffCount)) {
        lv_currWord = StringWord(lv_buffList, lv_wordIndex);
        lv_wordIndex = (lv_wordIndex + 1);
        lv_currBuff = StringReplaceWord(lv_currWord, "|", " ", c_stringReplaceAll, c_stringCase);
        lv_buff = (StringWord(lv_currBuff, 1));
        if (((lv_buff == null) || (lv_buff == ""))) {
            continue;
        }

        lv_origin = StringToInt(StringWord(lv_currBuff, 3));
        if ((lv_origin == -1)) {
            lv_origin = UnitGetOwner(lv_mergeUnit);
        }

        UnitBehaviorAddPlayer(lv_mergeUnit, lv_buff, StringToInt(StringWord(lv_currBuff, 3)), 1);
        UnitBehaviorSetDurationRemaining(lv_mergeUnit, lv_buff, StringToFixed(StringWord(lv_currBuff, 2)));
        if ((StringWord(lv_currBuff, 4) != "?")) {
            libSCEV_gf_MergeStatusEffectsMiscDataSet(lv_buff, lv_mergeUnit, StringWord(lv_currBuff, 4));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MergeStatusEffectsBegin_Init () {
    libSCEV_gt_MergeStatusEffectsBegin = TriggerCreate("libSCEV_gt_MergeStatusEffectsBegin_Func");
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_MergeStatusEffectsBegin, c_playerAny, "SCBW_MergeBegin");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MindControlStealTech
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MindControlStealTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;
    int lv_casterOwner;
    int lv_targetOwner;
    string lv_unitLink;
    string lv_leaderAlias;
    string lv_instance;
    string lv_instanceLink;
    bool lv_continue;
    string lv_upgradeLink;
    int lv_delta;
    int lv_i;

    // Automatic Variable Declarations
    string auto0F44F30A_userType;
    int auto0F44F30A_i;
    int auto833169CE_ae;
    const int auto833169CE_ai = 1;

    // Variable Initialization
    lv_target = EventUnitTargetUnit();
    lv_caster = EventUnit();
    lv_unitLink = "";
    lv_leaderAlias = "";
    lv_instanceLink = "";
    lv_upgradeLink = "";

    // Conditions
    if (testConds) {
        if (!(((UnitIsValid(lv_caster) && UnitIsValid(lv_target)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterOwner = UnitGetOwner(lv_caster);
    lv_targetOwner = UnitGetOwner(lv_target);
    lv_unitLink = (UnitGetType(lv_target));
    lv_leaderAlias = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitLink, "LeaderAlias", c_playerAny);
    auto0F44F30A_userType = "DarkArchonSCBWMindControl@StealTable";
    auto0F44F30A_i = 1;
    for ( ; auto0F44F30A_i <= UserDataInstanceCount(auto0F44F30A_userType) ; auto0F44F30A_i += 1 ) {
        lv_instance = UserDataInstance(auto0F44F30A_userType, auto0F44F30A_i);
        lv_instanceLink = (lv_instance);
        if (((lv_unitLink == lv_instanceLink) || (lv_leaderAlias == lv_instanceLink))) {
            lv_continue = true;
            break;
        }

    }
    if ((lv_continue == false)) {
        return true;
    }

    auto833169CE_ae = (UserDataFieldValueCount("DarkArchonSCBWMindControl@StealTable", "UpgradeLink") + 1);
    lv_i = 1;
    for ( ; ( (auto833169CE_ai >= 0 && lv_i <= auto833169CE_ae) || (auto833169CE_ai < 0 && lv_i >= auto833169CE_ae) ) ; lv_i += auto833169CE_ai ) {
        lv_upgradeLink = UserDataGetUpgrade("DarkArchonSCBWMindControl@StealTable", lv_instance, "UpgradeLink", lv_i);
        if (((lv_upgradeLink == "") || (lv_upgradeLink == null))) {
            return true;
        }

        lv_delta = (TechTreeUpgradeCount(lv_targetOwner, lv_upgradeLink, c_techCountCompleteOnly) - TechTreeUpgradeCount(lv_casterOwner, lv_upgradeLink, c_techCountCompleteOnly));
        if ((lv_delta > 0) && (TechTreeUpgradeIsAllowed(lv_casterOwner, lv_upgradeLink) == true)) {
            TechTreeUpgradeAddLevel(lv_casterOwner, lv_upgradeLink, MaxI(lv_delta, 0));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MindControlStealTech_Init () {
    libSCEV_gt_MindControlStealTech = TriggerCreate("libSCEV_gt_MindControlStealTech_Func");
    TriggerAddEventUnitAbility(libSCEV_gt_MindControlStealTech, null, AbilityCommand("DarkArchonSCBWMindControl", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinimapAllyView:CameraSnap
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MinimapAllyViewCameraSnap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libSCEV_gv_minimapAllyViewCameraSnapPointersListLength[lv_p] != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(lv_p, CameraGetTarget(libSCEV_gv_minimapAllyViewCameraSnapPointersList[lv_p][libSCEV_gv_minimapAllyViewCameraSnapPointersListPosition[lv_p]]), 0.0, -1, 10.0, false);
    if (libSCEV_gv_minimapAllyViewCameraSnapPointersListPosition[lv_p] >= libSCEV_gv_minimapAllyViewCameraSnapPointersListLength[lv_p]) {
        libSCEV_gv_minimapAllyViewCameraSnapPointersListPosition[lv_p] = 0;
    }
    else {
        libSCEV_gv_minimapAllyViewCameraSnapPointersListPosition[lv_p] = libSCEV_gv_minimapAllyViewCameraSnapPointersListPosition[lv_p] + 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MinimapAllyViewCameraSnap_Init () {
    libSCEV_gt_MinimapAllyViewCameraSnap = TriggerCreate("libSCEV_gt_MinimapAllyViewCameraSnap_Func");
    TriggerEnable(libSCEV_gt_MinimapAllyViewCameraSnap, false);
    TriggerAddEventKeyPressed(libSCEV_gt_MinimapAllyViewCameraSnap, c_playerAny, c_keyV, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinimapAllyView:CameraUpdate
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MinimapAllyViewCameraUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_jindexPlayer;

    // Automatic Variable Declarations
    playergroup autoF827FF5A_g;

    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libSCEV_gv_minimapAllyViewCameraSnapPointersListPosition[lv_p] = 0;
    autoF827FF5A_g = libSCEV_gf_HumanPlayers();
    lv_jindexPlayer = -1;
    while (true) {
        lv_jindexPlayer = PlayerGroupNextPlayer(autoF827FF5A_g, lv_jindexPlayer);
        if (lv_jindexPlayer < 0) { break; }
        PingSetPosition(libSCEV_gv_minimapAllyViewPings[lv_p][lv_jindexPlayer], CameraGetTarget(lv_jindexPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MinimapAllyViewCameraUpdate_Init () {
    libSCEV_gt_MinimapAllyViewCameraUpdate = TriggerCreate("libSCEV_gt_MinimapAllyViewCameraUpdate_Func");
    TriggerEnable(libSCEV_gt_MinimapAllyViewCameraUpdate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinimapAllyView:AllianceUpdate
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MinimapAllyViewAllianceUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_jindexPlayer;

    // Automatic Variable Declarations
    playergroup auto1D2F2625_g;
    playergroup auto9E065487_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1D2F2625_g = libSCEV_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1D2F2625_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libSCEV_gf_MinimapAllyViewCameraSnapPointersListUpdate(lv_indexPlayer);
        auto9E065487_g = libSCEV_gf_HumanPlayers();
        lv_jindexPlayer = -1;
        while (true) {
            lv_jindexPlayer = PlayerGroupNextPlayer(auto9E065487_g, lv_jindexPlayer);
            if (lv_jindexPlayer < 0) { break; }
            libSCEV_gv_minimapAllyViewPings[lv_indexPlayer][lv_jindexPlayer] = PingLastCreated();
            if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, lv_indexPlayer), lv_jindexPlayer) == true) && (lv_jindexPlayer != lv_indexPlayer)) {
                PingSetVisible(libSCEV_gv_minimapAllyViewPings[lv_indexPlayer][lv_jindexPlayer], true);
            }
            else {
                PingSetVisible(libSCEV_gv_minimapAllyViewPings[lv_indexPlayer][lv_jindexPlayer], false);
            }
        }
    }
    libSCEV_gf_MinimapAllyViewRescale();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MinimapAllyViewAllianceUpdate_Init () {
    libSCEV_gt_MinimapAllyViewAllianceUpdate = TriggerCreate("libSCEV_gt_MinimapAllyViewAllianceUpdate_Func");
    TriggerEnable(libSCEV_gt_MinimapAllyViewAllianceUpdate, false);
    TriggerAddEventPlayerAllianceChange(libSCEV_gt_MinimapAllyViewAllianceUpdate, c_playerAny);
    TriggerAddEventPlayerLeft(libSCEV_gt_MinimapAllyViewAllianceUpdate, c_playerAny, c_gameResultUndecided);
    TriggerAddEventPlayerJoin(libSCEV_gt_MinimapAllyViewAllianceUpdate, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinimapAllyView:Init
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MinimapAllyViewInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    int lv_indexPlayer;
    int lv_jindexPlayer;

    // Automatic Variable Declarations
    playergroup auto3820D084_g;
    playergroup autoF0D67B2A_g;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_players = libSCEV_gf_HumanPlayers();
    auto3820D084_g = lv_players;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3820D084_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libSCEV_gf_RegisterCameraMoveEvent(libSCEV_gt_MinimapAllyViewCameraUpdate, lv_indexPlayer, c_cameraMoveReasonAny);
        autoF0D67B2A_g = lv_players;
        lv_jindexPlayer = -1;
        while (true) {
            lv_jindexPlayer = PlayerGroupNextPlayer(autoF0D67B2A_g, lv_jindexPlayer);
            if (lv_jindexPlayer < 0) { break; }
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_indexPlayer), "SCBW_PingViewArea", CameraGetTarget(lv_jindexPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_jindexPlayer, false)), 0.0, 270.0);
            libSCEV_gv_minimapAllyViewPings[lv_indexPlayer][lv_jindexPlayer] = PingLastCreated();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MinimapAllyViewInit_Init () {
    libSCEV_gt_MinimapAllyViewInit = TriggerCreate("libSCEV_gt_MinimapAllyViewInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCEvo: Events
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_SCEvoEvents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;
    datetime lv_itStart;
    datetime lv_itEnd;
    string lv_itDisabler;
    string lv_itSkin;
    string lv_itUpgrade;
    string lv_itMessage;
    unitfilter lv_itMessageFilter;
    datetime lv_curDateTime;
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    string autoB2BB2365_userType;
    int autoB2BB2365_i;
    playergroup autoD326C855_g;
    playergroup auto32D8B1A8_g;
    unitgroup autoB1BFB680_g;
    int autoB1BFB680_u;

    // Variable Initialization
    lv_itMessageFilter = UnitFilter(0, 0, 0, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_curDateTime = CurrentDateTimeGet();
    autoB2BB2365_userType = libSCEV_gv_sCEvoEventsEventTable;
    autoB2BB2365_i = 1;
    for ( ; autoB2BB2365_i <= UserDataInstanceCount(autoB2BB2365_userType) ; autoB2BB2365_i += 1 ) {
        lv_itInstance = UserDataInstance(autoB2BB2365_userType, autoB2BB2365_i);
        lv_itStart = StringToDateTime(UserDataGetString(libSCEV_gv_sCEvoEventsEventTable, lv_itInstance, "Start", 1));
        lv_itEnd = StringToDateTime(UserDataGetString(libSCEV_gv_sCEvoEventsEventTable, lv_itInstance, "End", 1));
        lv_itDisabler = UserDataGetGameLink("SCEV_Events", lv_itInstance, "Disabler", 1);
        lv_itSkin = UserDataGetGameLink("SCEV_Events", lv_itInstance, "Skin", 1);
        lv_itUpgrade = UserDataGetGameLink(libSCEV_gv_sCEvoEventsEventTable, lv_itInstance, "Upgrade", 1);
        lv_itMessage = (UserDataGetString(libSCEV_gv_sCEvoEventsEventTable, lv_itInstance, "Message", 1));
        lv_itMessageFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(UserDataGetString(libSCEV_gv_sCEvoEventsEventTable, lv_itInstance, "MessageFilter", 1));
        if (((CatalogEntryIsValid(c_gameCatalogUpgrade, lv_itDisabler) == true) || (libNtve_gf_DateTimeisBetween(lv_curDateTime, lv_itStart, lv_itEnd) == false))) {
            continue;
        }

        if ((CatalogEntryIsValid(c_gameCatalogSkin, lv_itSkin) == true)) {
            autoD326C855_g = PlayerGroupActive();
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(autoD326C855_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                PlayerApplySkin(lv_itPlayer, lv_itSkin, true);
            }
        }

        if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lv_itUpgrade) == true)) {
            auto32D8B1A8_g = PlayerGroupActive();
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto32D8B1A8_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                TechTreeUpgradeAddLevel(lv_itPlayer, lv_itUpgrade, 1);
            }
        }

        autoB1BFB680_g = UnitGroup(null, c_playerAny, RegionEntireMap(), lv_itMessageFilter, 0);
        autoB1BFB680_u = UnitGroupCount(autoB1BFB680_g, c_unitCountAll);
        for (;; autoB1BFB680_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoB1BFB680_g, autoB1BFB680_u);
            if (lv_itUnit == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(lv_itUnit), lv_itMessage);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_SCEvoEvents_Init () {
    libSCEV_gt_SCEvoEvents = TriggerCreate("libSCEV_gt_SCEvoEvents_Func");
    TriggerAddEventGeneric(libSCEV_gt_SCEvoEvents, "EventsInit");
    TriggerAddEventCheatUsed(libSCEV_gt_SCEvoEvents, c_playerAny, c_gameCheatDateTime);
}

void libSCEV_InitTriggers () {
    libSCEV_gt_MineralWallsUpdate_Init();
    libSCEV_gt_SCEvoFeatureInit_Init();
    libSCEV_gt_FractionalArmorAdd_Init();
    libSCEV_gt_FractionalArmorUpgrade_Init();
    libSCEV_gt_FractionalArmorUpdateTrigger_Init();
    libSCEV_gt_FractionalArmorPlayerDamage_Init();
    libSCEV_gt_FractionalArmorGodCheat_Init();
    libSCEV_gt_MissChanceRevealTimerExpire_Init();
    libSCEV_gt_MissChanceRevealAttacker_Init();
    libSCEV_gt_MissChanceAdd_Init();
    libSCEV_gt_MissChanceShrubCheck_Init();
    libSCEV_gt_MissChanceHighGroundRegionEnter_Init();
    libSCEV_gt_MissChanceHighGroundRegionExit_Init();
    libSCEV_gt_LegacyUnitSwap_Init();
    libSCEV_gt_LegacyRefund_Init();
    libSCEV_gt_LegacyCheatCheatTracker_Init();
    libSCEV_gt_OperationCwalActivate_Init();
    libSCEV_gt_OperationCwalTrain_Init();
    libSCEV_gt_OperationCwalConstuction_Init();
    libSCEV_gt_OperationCwalMorph_Init();
    libSCEV_gt_InfiniteMoneyMapTrigger_Init();
    libSCEV_gt_MimicCheckStorePlayerIndex_Init();
    libSCEV_gt_MimicCheckSpiderMine_Init();
    libSCEV_gt_ReaverPathingCheck_Init();
    libSCEV_gt_ReaverPathingChase_Init();
    libSCEV_gt_MergeStatusEffectsTrack_Init();
    libSCEV_gt_MergeStatusEffectsBegin_Init();
    libSCEV_gt_MindControlStealTech_Init();
    libSCEV_gt_MinimapAllyViewCameraSnap_Init();
    libSCEV_gt_MinimapAllyViewCameraUpdate_Init();
    libSCEV_gt_MinimapAllyViewAllianceUpdate_Init();
    libSCEV_gt_MinimapAllyViewInit_Init();
    libSCEV_gt_SCEvoEvents_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libSCEV_InitLib_completed = false;

void libSCEV_InitLib () {
    if (libSCEV_InitLib_completed) {
        return;
    }

    libSCEV_InitLib_completed = true;

    libSCEV_InitLibraries();
    libSCEV_InitVariables();
    libSCEV_InitCustomScript();
    libSCEV_InitTriggers();
}

