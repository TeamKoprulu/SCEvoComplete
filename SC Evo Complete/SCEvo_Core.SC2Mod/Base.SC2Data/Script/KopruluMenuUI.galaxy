
// -------------- KopruluMenu -------------------
int KopruluMenu;
int KopruluMenuToggleButton;
int KopruluMenuSkinsButton;
trigger KopruluSkinsResponses_t;
trigger KopruluSkinsTimerExpire_t;
timer KopruluSkinsTimer;
const int c_KopruluSkinsCount = 2;

int[c_KopruluSkinsCount + 1] KopruluSkinsItems;

bool KopruluSkinsResponses_Func(bool test_conds, bool run_actions){
    playergroup players = PlayerGroupActive();
    int player = EventPlayer();
    string race;
    string skin;
    bool isBWRace;
    bool checked;
    if(!PlayerGroupHasPlayer(players, player) || (PlayerStatus(player) != c_playerStatusActive) ) {
        return false;
    }
    race = PlayerRace(player);
    checked = DialogControlGetPropertyAsBool(EventDialogControl(), c_triggerControlPropertyChecked, player);
    isBWRace = (race == "BWTe" || race == "BWPr" || race == "BWZe");

    if(EventDialogControl() == KopruluSkinsItems[0]){
        skin = c_extBankKey_Setting_ClassicSkins;
    }
    else if(EventDialogControl() == KopruluSkinsItems[1]){
        skin = c_extBankKey_Setting_AiurNexus;
    }
    
    Extension_OptionsBankSaveValue(player, skin, IntToString(BoolToInt(checked)));
    if(checked){
        if(skin == c_extBankKey_Setting_ClassicSkins){
            if(isBWRace){
                libSCEV_gf_LegacyIconsActivate(checked, PlayerGroupSingle(player));
            }
        }

        else if(skin == c_extBankKey_Setting_AiurNexus){
            if(isBWRace){
                libNtve_gf_PlayerApplySkinReplacingExistingUnit(player, "NexusSCBW@Aiur", checked);
            }
        }
    }

    return true;
}

static string l_IntToStringDoubleDigit (int value) {
    string s;
    s = IntToString(value);
    if (StringLength(s) == 1) {
        s = ("0" + s);
    }
    return s;
}

bool KopruluSkinsTimerExpire_Func(bool test_conds, bool run_actions){
    int i;
    int tmp_player;
    for (i = 1; i <= PlayerGroupCount(PlayerGroupActive()); i += 1) {
        tmp_player = PlayerGroupPlayer(PlayerGroupActive(), i);
        if(DialogControlIsVisible(KopruluMenu, tmp_player)){
            DialogControlSetPropertyAsBool(KopruluMenu, c_triggerControlPropertyVisible, PlayerGroupSingle(tmp_player), false);
        }
        DialogControlSetPropertyAsBool(KopruluMenuSkinsButton, c_triggerControlPropertyEnabled, PlayerGroupSingle(tmp_player), false);
    }
    TriggerEnable(KopruluSkinsResponses_t, false);
    KopruluSkinsTimer = null;
    TriggerDestroy(TriggerGetCurrent());
    return true;
}

void KopruluMenuCreateUI(){
    int i;
    int di;
    int fullscreenPanel;
    playergroup pg = PlayerGroupActive();
    string race;
    int tmp_player;
    bool isBWRace;

    if(KopruluMenu == c_invalidDialogControlId){

        fullscreenPanel = DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
        KopruluMenu = DialogControlHookup(fullscreenPanel, c_triggerControlTypePanel, "KopruluMenu");
        DialogControlSetPropertyAsBool(KopruluMenu, c_triggerControlPropertyVisible, pg, false);
        // Toggle Menu Button
        // KopruluMenuToggle_t = TriggerCreate("KopruluMenuToggle_Func");
        // Toggle Buttons
        // di = DialogControlHookup(fullscreenPanel, c_triggerControlTypePanel, "MenuBar/KopruluButton");
        // DialogControlSetPropertyAsBool(di, c_triggerControlPropertyVisible, pg, true);
        // KopruluMenuToggleButton = DialogControlHookup(di, c_triggerControlTypeButton, "MenuButton");
        // TriggerAddEventDialogControl(KopruluMenuToggle_t, c_playerAny, DialogControlLastCreated(), c_triggerControlEventTypeClick);

        //---------------------------------------- Skins TAB ---------------------------------------- //
            KopruluSkinsResponses_t = TriggerCreate("KopruluSkinsResponses_Func");
            TriggerEnable(KopruluSkinsResponses_t, false);

            for (i = 0; i < c_KopruluSkinsCount; i += 1) {
                KopruluSkinsItems[i] = DialogControlHookup(fullscreenPanel, c_triggerControlTypeCheckBox, "KopruluMenu_SkinsPanel/CheckBox_" + l_IntToStringDoubleDigit(i));
                DialogControlSetPropertyAsBool(KopruluSkinsItems[i], c_triggerControlPropertyChecked, pg, false);
                DialogControlSetPropertyAsBool(KopruluSkinsItems[i], c_triggerControlPropertyEnabled, pg, false);
                TriggerAddEventDialogControl(KopruluSkinsResponses_t, c_playerAny, KopruluSkinsItems[i], c_triggerControlEventTypeChecked);
            }

            for (i = 1; i <= PlayerGroupCount(pg); i += 1) {
                tmp_player = PlayerGroupPlayer(pg, i);
                race = PlayerRace(tmp_player);
                isBWRace = (race == "BWTe" || race == "BWPr" || race == "BWZe");
                if(isBWRace){
                    DialogControlSetPropertyAsBool(KopruluSkinsItems[0], c_triggerControlPropertyEnabled, PlayerGroupSingle(tmp_player), true);
                    DialogControlSetPropertyAsBool(KopruluSkinsItems[1], c_triggerControlPropertyEnabled, PlayerGroupSingle(tmp_player), true);    
                }
            }

            KopruluMenuSkinsButton = DialogControlHookup(KopruluMenu, c_triggerControlTypeButton, "KopruluTabControl/TabContainer/TabButton2");
            DialogControlSetPropertyAsBool(KopruluMenuSkinsButton, c_triggerControlPropertyEnabled, pg, true);

        // ------------------------------------------------------------------------------------------ //

        TimerStart(TimerCreate(), 420, false, c_timeGame);
        KopruluSkinsTimer = TimerLastStarted();
        KopruluSkinsTimerExpire_t = TriggerCreate("KopruluSkinsTimerExpire_Func");
        TriggerAddEventTimer(KopruluSkinsTimerExpire_t, KopruluSkinsTimer);

        return;
    }
    return;

}
