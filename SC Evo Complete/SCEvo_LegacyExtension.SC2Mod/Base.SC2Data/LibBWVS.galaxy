include "TriggerLibs/NativeLib"
include "LibSCBW"

include "LibBWVS_h"

//--------------------------------------------------------------------------------------------------
// Library: SCEvoExtension
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libBWVS_InitLibraries () {
    libNtve_InitVariables();
    libSCBW_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Main
//--------------------------------------------------------------------------------------------------
include "Script/ExtensionBank"
void Extension_main(){
    ExtensionInit();
}

void libBWVS_InitCustomScript () {
    Extension_main();
}

// Functions
bool libBWVS_gf_UnitisMineralResource (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "BattleStationMineralField") || (UnitGetType(lp_unit) == "BattleStationMineralField750") || (UnitGetType(lp_unit) == "LabMineralField750") || (UnitGetType(lp_unit) == "LabMineralField") || (UnitGetType(lp_unit) == "MineralField") || (UnitGetType(lp_unit) == "MineralField450") || (UnitGetType(lp_unit) == "MineralField750") || (UnitGetType(lp_unit) == "MineralFieldOpaque900") || (UnitGetType(lp_unit) == "MineralFieldOpaque") || (UnitGetType(lp_unit) == "PurifierMineralField") || (UnitGetType(lp_unit) == "PurifierMineralField750") || (UnitGetType(lp_unit) == "PurifierRichMineralField") || (UnitGetType(lp_unit) == "PurifierRichMineralField750") || (UnitGetType(lp_unit) == "RichMineralField") || (UnitGetType(lp_unit) == "RichMineralField750"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libBWVS_gf_UnitisRichMineral (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "PurifierRichMineralField") || (UnitGetType(lp_unit) == "PurifierRichMineralField750") || (UnitGetType(lp_unit) == "RichMineralField") || (UnitGetType(lp_unit) == "RichMineralField750"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libBWVS_gf_UnitisVespeneResource (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "VespeneGeyser") || (UnitGetType(lp_unit) == "ProtossVespeneGeyser") || (UnitGetType(lp_unit) == "PurifierVespeneGeyser") || (UnitGetType(lp_unit) == "ShakurasVespeneGeyser") || (UnitGetType(lp_unit) == "SpacePlatformGeyser"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libBWVS_gf_UnitisRichVespene (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "RichVespeneGeyser"))) {
        return true;
    }
    else {
        return false;
    }
}

void libBWVS_gf_UpdateLegacyMap () {
    // Variable Declarations
    string lv_indexInstance;
    int lv_amount;
    region lv_region;
    int lv_index;
    int lv_richMinValueTemp;

    // Automatic Variable Declarations
    string auto4C72C544_userType;
    int auto4C72C544_i;
    unitgroup autoC6E40B4D_g;
    int autoC6E40B4D_u;
    unit autoC6E40B4D_var;
    unitgroup auto0E708E8D_g;
    int auto0E708E8D_u;
    unit auto0E708E8D_var;
    unitgroup auto30F100DC_g;
    int auto30F100DC_u;
    unit auto30F100DC_var;
    string auto5648BFED_userType;
    int auto5648BFED_i;
    unitgroup auto1164DDAB_g;
    int auto1164DDAB_u;
    unit auto1164DDAB_var;
    unitgroup autoBA2307DA_g;
    int autoBA2307DA_u;
    unit autoBA2307DA_var;
    unitgroup autoEF75F783_g;
    int autoEF75F783_u;
    unit autoEF75F783_var;
    unitgroup autoFAC714CE_g;
    int autoFAC714CE_u;
    unit autoFAC714CE_var;

    // Variable Initialization

    // Implementation
    auto4C72C544_userType = "MinResourceTable";
    auto4C72C544_i = 1;
    for ( ; auto4C72C544_i <= UserDataInstanceCount(auto4C72C544_userType) ; auto4C72C544_i += 1 ) {
        lv_indexInstance = UserDataInstance(auto4C72C544_userType, auto4C72C544_i);
        lv_amount = UserDataGetInt("MinResourceTable", lv_indexInstance, "Amount", 1);
        lv_region = RegionFromName(("Min" + IntToString(lv_amount)));
        if ((lv_region != null)) {
            autoC6E40B4D_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC6E40B4D_u = UnitGroupCount(autoC6E40B4D_g, c_unitCountAll);
            for (;; autoC6E40B4D_u -= 1) {
                autoC6E40B4D_var = UnitGroupUnitFromEnd(autoC6E40B4D_g, autoC6E40B4D_u);
                if (autoC6E40B4D_var == null) { break; }
                if ((libBWVS_gf_UnitisMineralResource(autoC6E40B4D_var) == true)) {
                    UnitSetPropertyFixed(autoC6E40B4D_var, c_unitPropResources, lv_amount);
                }

            }
        }

        lv_region = RegionFromName(("RichMinReplace" + IntToString(lv_amount)));
        if ((lv_region != null)) {
            auto0E708E8D_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto0E708E8D_u = UnitGroupCount(auto0E708E8D_g, c_unitCountAll);
            for (;; auto0E708E8D_u -= 1) {
                auto0E708E8D_var = UnitGroupUnitFromEnd(auto0E708E8D_g, auto0E708E8D_u);
                if (auto0E708E8D_var == null) { break; }
                if ((libBWVS_gf_UnitisRichMineral(auto0E708E8D_var) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto0E708E8D_var));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_amount);
                    UnitRemove(auto0E708E8D_var);
                }

            }
        }

        lv_region = RegionFromName("RichMinReplace");
        if ((lv_region != null)) {
            auto30F100DC_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto30F100DC_u = UnitGroupCount(auto30F100DC_g, c_unitCountAll);
            for (;; auto30F100DC_u -= 1) {
                auto30F100DC_var = UnitGroupUnitFromEnd(auto30F100DC_g, auto30F100DC_u);
                if (auto30F100DC_var == null) { break; }
                if ((libBWVS_gf_UnitisRichMineral(auto30F100DC_var) == true)) {
                    lv_richMinValueTemp = libNtve_gf_UnitGetPropertyResources(auto30F100DC_var, c_unitPropCurrent);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto30F100DC_var));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_richMinValueTemp);
                    UnitRemove(auto30F100DC_var);
                }

            }
        }

    }
    auto5648BFED_userType = "GasResourceTable";
    auto5648BFED_i = 1;
    for ( ; auto5648BFED_i <= UserDataInstanceCount(auto5648BFED_userType) ; auto5648BFED_i += 1 ) {
        lv_indexInstance = UserDataInstance(auto5648BFED_userType, auto5648BFED_i);
        lv_amount = UserDataGetInt("GasResourceTable", lv_indexInstance, "Amount", 1);
        lv_region = RegionFromName(("Gas" + IntToString(lv_amount)));
        if ((lv_region != null)) {
            auto1164DDAB_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1164DDAB_u = UnitGroupCount(auto1164DDAB_g, c_unitCountAll);
            for (;; auto1164DDAB_u -= 1) {
                auto1164DDAB_var = UnitGroupUnitFromEnd(auto1164DDAB_g, auto1164DDAB_u);
                if (auto1164DDAB_var == null) { break; }
                if ((libBWVS_gf_UnitisVespeneResource(auto1164DDAB_var) == true)) {
                    UnitSetPropertyFixed(auto1164DDAB_var, c_unitPropResources, lv_amount);
                }

            }
        }

        lv_region = RegionFromName(("RichGasReplace" + IntToString(lv_amount)));
        if ((lv_region != null)) {
            autoBA2307DA_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoBA2307DA_u = UnitGroupCount(autoBA2307DA_g, c_unitCountAll);
            for (;; autoBA2307DA_u -= 1) {
                autoBA2307DA_var = UnitGroupUnitFromEnd(autoBA2307DA_g, autoBA2307DA_u);
                if (autoBA2307DA_var == null) { break; }
                if ((libBWVS_gf_UnitisRichVespene(autoBA2307DA_var) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "VespeneGeyser", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoBA2307DA_var));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_amount);
                    UnitRemove(autoBA2307DA_var);
                }

            }
        }

    }
    lv_region = RegionFromName("GasDelete");
    if ((lv_region != null)) {
        autoEF75F783_g = UnitGroup(null, 0, lv_region, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEF75F783_u = UnitGroupCount(autoEF75F783_g, c_unitCountAll);
        for (;; autoEF75F783_u -= 1) {
            autoEF75F783_var = UnitGroupUnitFromEnd(autoEF75F783_g, autoEF75F783_u);
            if (autoEF75F783_var == null) { break; }
            if ((libBWVS_gf_UnitisVespeneResource(autoEF75F783_var) == true)) {
                UnitRemove(autoEF75F783_var);
            }

        }
    }

    lv_region = RegionFromName("TowerDelete");
    if ((lv_region != null)) {
        autoFAC714CE_g = UnitGroup("XelNagaTower", 0, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFAC714CE_u = UnitGroupCount(autoFAC714CE_g, c_unitCountAll);
        for (;; autoFAC714CE_u -= 1) {
            autoFAC714CE_var = UnitGroupUnitFromEnd(autoFAC714CE_g, autoFAC714CE_u);
            if (autoFAC714CE_var == null) { break; }
            UnitRemove(autoFAC714CE_var);
        }
    }

}

void libBWVS_gf_RemoveGeysers () {
    // Variable Declarations
    unit lv_searchGeyser;
    unit lv_targetGeyser;
    fixed lv_distanceToClosestMineral;
    unit lv_closestMineralToSearchGeyser;
    unit lv_closestMineralToTargetGeyser;
    unitgroup lv_mineralGroup;
    int lv_r;

    // Automatic Variable Declarations
    unitgroup autoEABEE72C_g;
    int autoEABEE72C_u;
    unit autoEABEE72C_var;
    unitgroup auto1D092848_g;
    int auto1D092848_u;
    unit auto1D092848_var;
    unitgroup auto5DD3103C_g;
    int auto5DD3103C_u;
    unit auto5DD3103C_var;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    autoEABEE72C_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEABEE72C_u = UnitGroupCount(autoEABEE72C_g, c_unitCountAll);
    for (;; autoEABEE72C_u -= 1) {
        autoEABEE72C_var = UnitGroupUnitFromEnd(autoEABEE72C_g, autoEABEE72C_u);
        if (autoEABEE72C_var == null) { break; }
        UnitGroupAdd(lv_mineralGroup, autoEABEE72C_var);
    }
    auto1D092848_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1D092848_u = UnitGroupCount(auto1D092848_g, c_unitCountAll);
    for (;; auto1D092848_u -= 1) {
        auto1D092848_var = UnitGroupUnitFromEnd(auto1D092848_g, auto1D092848_u);
        if (auto1D092848_var == null) { break; }
        lv_searchGeyser = null;
        lv_targetGeyser = null;
        lv_closestMineralToTargetGeyser = null;
        lv_closestMineralToSearchGeyser = null;
        if (((UnitGetType(auto1D092848_var) == "RichVespeneGeyser") || (UnitGetType(auto1D092848_var) == "VespeneGeyser") || (UnitGetType(auto1D092848_var) == "ProtossVespeneGeyser") || (UnitGetType(auto1D092848_var) == "PurifierVespeneGeyser") || (UnitGetType(auto1D092848_var) == "ShakurasVespeneGeyser") || (UnitGetType(auto1D092848_var) == "SpacePlatformGeyser"))) {
            lv_searchGeyser = auto1D092848_var;
            auto5DD3103C_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_searchGeyser), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto5DD3103C_u = UnitGroupCount(auto5DD3103C_g, c_unitCountAll);
            for (;; auto5DD3103C_u -= 1) {
                auto5DD3103C_var = UnitGroupUnitFromEnd(auto5DD3103C_g, auto5DD3103C_u);
                if (auto5DD3103C_var == null) { break; }
                if (((UnitGetType(auto5DD3103C_var) == "RichVespeneGeyser") || (UnitGetType(auto5DD3103C_var) == "VespeneGeyser") || (UnitGetType(auto5DD3103C_var) == "ProtossVespeneGeyser") || (UnitGetType(auto5DD3103C_var) == "PurifierVespeneGeyser") || (UnitGetType(auto5DD3103C_var) == "ShakurasVespeneGeyser") || (UnitGetType(auto5DD3103C_var) == "SpacePlatformGeyser"))) {
                    if ((auto5DD3103C_var != lv_searchGeyser) && ((DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(auto5DD3103C_var)) > 12.0) || (DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(auto5DD3103C_var)) < 6.0)) && (UnitGetHeight(auto5DD3103C_var) == UnitGetHeight(lv_searchGeyser))) {
                        lv_targetGeyser = auto5DD3103C_var;
                        break;
                    }

                }

            }
            if ((lv_targetGeyser != null)) {
                lv_closestMineralToSearchGeyser = UnitGroupClosestToPoint(lv_mineralGroup, UnitGetPosition(lv_searchGeyser));
                lv_closestMineralToTargetGeyser = UnitGroupClosestToPoint(lv_mineralGroup, UnitGetPosition(lv_targetGeyser));
                if ((DistanceBetweenPoints(UnitGetPosition(lv_targetGeyser), UnitGetPosition(lv_closestMineralToTargetGeyser)) == DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(lv_closestMineralToSearchGeyser)))) {
                    lv_r = RandomInt(1, 2);
                    if ((lv_r == 1)) {
                        UnitRemove(lv_targetGeyser);
                    }
                    else {
                        UnitRemove(lv_searchGeyser);
                    }
                    break;
                }
                else if ((DistanceBetweenPoints(UnitGetPosition(lv_targetGeyser), UnitGetPosition(lv_closestMineralToTargetGeyser)) > DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(lv_closestMineralToSearchGeyser)))) {
                    UnitRemove(lv_targetGeyser);
                }
                else if ((DistanceBetweenPoints(UnitGetPosition(lv_searchGeyser), UnitGetPosition(lv_closestMineralToSearchGeyser)) > DistanceBetweenPoints(UnitGetPosition(lv_targetGeyser), UnitGetPosition(lv_closestMineralToTargetGeyser)))) {
                    UnitRemove(lv_searchGeyser);
                }
            }

        }

    }
}

void libBWVS_gf_RemoveGeysers2 () {
    // Variable Declarations
    unit lv_searchGeyser;
    unit lv_targetGeyser;
    fixed lv_distanceToClosestMineral;
    unit lv_closestMineralToSearchGeyser;
    unit lv_closestMineralToTargetGeyser;
    unitgroup lv_mineralGroup;
    int lv_r;
    unitgroup lv_mineralCluster;
    unit lv_searchMineral;
    unitgroup lv_excludedMinerals;

    // Automatic Variable Declarations
    unitgroup auto1BA0BE56_g;
    int auto1BA0BE56_u;
    unit auto1BA0BE56_var;
    const int auto161CD4B6_n = 15;
    int auto161CD4B6_i;
    unitgroup auto6A3C5A50_g;
    int auto6A3C5A50_u;
    unit auto6A3C5A50_var;
    unitgroup auto90AEC248_g;
    int auto90AEC248_u;
    unit auto90AEC248_var;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();
    lv_mineralCluster = UnitGroupEmpty();
    lv_excludedMinerals = UnitGroupEmpty();

    // Implementation
    auto1BA0BE56_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1BA0BE56_u = UnitGroupCount(auto1BA0BE56_g, c_unitCountAll);
    for (;; auto1BA0BE56_u -= 1) {
        auto1BA0BE56_var = UnitGroupUnitFromEnd(auto1BA0BE56_g, auto1BA0BE56_u);
        if (auto1BA0BE56_var == null) { break; }
        if ((UnitGroupHasUnit(lv_excludedMinerals, auto1BA0BE56_var) == false)) {
            UnitGroupAdd(lv_mineralCluster, auto1BA0BE56_var);
            lv_searchMineral = auto1BA0BE56_var;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TransportOverlordCocoon", 0, 1, UnitGetPosition(lv_searchMineral));
            for (auto161CD4B6_i = 1; auto161CD4B6_i <= auto161CD4B6_n; auto161CD4B6_i += 1) {
                auto6A3C5A50_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_searchMineral), 2.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2);
                auto6A3C5A50_u = UnitGroupCount(auto6A3C5A50_g, c_unitCountAll);
                for (;; auto6A3C5A50_u -= 1) {
                    auto6A3C5A50_var = UnitGroupUnitFromEnd(auto6A3C5A50_g, auto6A3C5A50_u);
                    if (auto6A3C5A50_var == null) { break; }
                    if ((UnitGroupHasUnit(lv_excludedMinerals, auto6A3C5A50_var) == false) && (UnitGroupHasUnit(lv_mineralCluster, auto6A3C5A50_var) == false) && (auto6A3C5A50_var != lv_searchMineral)) {
                        UnitGroupAdd(lv_mineralCluster, auto6A3C5A50_var);
                        lv_searchMineral = auto6A3C5A50_var;
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OverlordTransport", 0, 1, UnitGetPosition(lv_searchMineral));
                        if ((UnitGroupCount(lv_mineralCluster, c_unitCountAlive) > 10)) {
                            break;
                        }

                    }

                }
            }
            if ((UnitGroupCount(lv_mineralCluster, c_unitCountAlive) > 10)) {
            }

            UnitGroupAddUnitGroup(lv_excludedMinerals, lv_mineralCluster);
            auto90AEC248_g = lv_mineralCluster;
            auto90AEC248_u = UnitGroupCount(auto90AEC248_g, c_unitCountAll);
            for (;; auto90AEC248_u -= 1) {
                auto90AEC248_var = UnitGroupUnitFromEnd(auto90AEC248_g, auto90AEC248_u);
                if (auto90AEC248_var == null) { break; }
                UnitGroupRemove(lv_mineralCluster, auto90AEC248_var);
            }
        }

    }
}

void libBWVS_gf_IncreaseResourceCounts () {
    // Variable Declarations
    unitgroup lv_mineralGroup;
    unitgroup lv_geyserGroup;
    int lv_r;

    // Automatic Variable Declarations
    unitgroup auto9CF5A7F8_g;
    int auto9CF5A7F8_u;
    unit auto9CF5A7F8_var;
    unitgroup auto141D92B8_g;
    int auto141D92B8_u;
    unit auto141D92B8_var;
    unitgroup auto59A7539B_g;
    int auto59A7539B_u;
    unit auto59A7539B_var;
    unitgroup autoAF19633F_g;
    int autoAF19633F_u;
    unit autoAF19633F_var;
    unitgroup auto00D7C2A8_g;
    int auto00D7C2A8_u;
    unit auto00D7C2A8_var;
    unitgroup auto3CC1C735_g;
    int auto3CC1C735_u;
    unit auto3CC1C735_var;
    unitgroup auto7D92255D_g;
    int auto7D92255D_u;
    unit auto7D92255D_var;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();
    lv_geyserGroup = UnitGroupEmpty();

    // Implementation
    auto9CF5A7F8_g = UnitGroup("BattleStationMineralField750", 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9CF5A7F8_u = UnitGroupCount(auto9CF5A7F8_g, c_unitCountAll);
    for (;; auto9CF5A7F8_u -= 1) {
        auto9CF5A7F8_var = UnitGroupUnitFromEnd(auto9CF5A7F8_g, auto9CF5A7F8_u);
        if (auto9CF5A7F8_var == null) { break; }
        libNtve_gf_ReplaceUnit(auto9CF5A7F8_var, "BattleStationMineralField", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    }
    auto141D92B8_g = UnitGroup("LabMineralField750", 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto141D92B8_u = UnitGroupCount(auto141D92B8_g, c_unitCountAll);
    for (;; auto141D92B8_u -= 1) {
        auto141D92B8_var = UnitGroupUnitFromEnd(auto141D92B8_g, auto141D92B8_u);
        if (auto141D92B8_var == null) { break; }
        libNtve_gf_ReplaceUnit(auto141D92B8_var, "LabMineralField", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    }
    auto59A7539B_g = UnitGroup("MineralField750", 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto59A7539B_u = UnitGroupCount(auto59A7539B_g, c_unitCountAll);
    for (;; auto59A7539B_u -= 1) {
        auto59A7539B_var = UnitGroupUnitFromEnd(auto59A7539B_g, auto59A7539B_u);
        if (auto59A7539B_var == null) { break; }
        libNtve_gf_ReplaceUnit(auto59A7539B_var, "MineralField", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    }
    autoAF19633F_g = UnitGroup("MineralFieldOpaque900", 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAF19633F_u = UnitGroupCount(autoAF19633F_g, c_unitCountAll);
    for (;; autoAF19633F_u -= 1) {
        autoAF19633F_var = UnitGroupUnitFromEnd(autoAF19633F_g, autoAF19633F_u);
        if (autoAF19633F_var == null) { break; }
        libNtve_gf_ReplaceUnit(autoAF19633F_var, "MineralFieldOpaque", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    }
    auto00D7C2A8_g = UnitGroup("PurifierRichMineralField750", 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto00D7C2A8_u = UnitGroupCount(auto00D7C2A8_g, c_unitCountAll);
    for (;; auto00D7C2A8_u -= 1) {
        auto00D7C2A8_var = UnitGroupUnitFromEnd(auto00D7C2A8_g, auto00D7C2A8_u);
        if (auto00D7C2A8_var == null) { break; }
        libNtve_gf_ReplaceUnit(auto00D7C2A8_var, "PurifierRichMineralField", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    }
    auto3CC1C735_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3CC1C735_u = UnitGroupCount(auto3CC1C735_g, c_unitCountAll);
    for (;; auto3CC1C735_u -= 1) {
        auto3CC1C735_var = UnitGroupUnitFromEnd(auto3CC1C735_g, auto3CC1C735_u);
        if (auto3CC1C735_var == null) { break; }
        UnitSetPropertyFixed(auto3CC1C735_var, c_unitPropResources, 1700.0);
    }
    Wait(0.0625, c_timeReal);
    auto7D92255D_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D92255D_u = UnitGroupCount(auto7D92255D_g, c_unitCountAll);
    for (;; auto7D92255D_u -= 1) {
        auto7D92255D_var = UnitGroupUnitFromEnd(auto7D92255D_g, auto7D92255D_u);
        if (auto7D92255D_var == null) { break; }
        UnitSetPropertyFixed(auto7D92255D_var, c_unitPropResources, 5000.0);
    }
}

void libBWVS_gf_SetFoWState () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    playergroup autoD605F2B7_g;

    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("1") == "0001")) {
        autoD605F2B7_g = PlayerGroupActive();
        lv_index = -1;
        while (true) {
            lv_index = PlayerGroupNextPlayer(autoD605F2B7_g, lv_index);
            if (lv_index < 0) { break; }
            VisFillArea(lv_index, RegionEntireMap(), c_fillTypeHidden, false);
        }
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Race Initialization
//--------------------------------------------------------------------------------------------------
bool libBWVS_gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_r;
    string lv_unitType;
    bool lv_isBWMap;

    // Automatic Variable Declarations
    playergroup autoEABAE26A_g;
    string autoE48FA8EA_val;
    playergroup autoCFBAF88E_g;
    int auto2A1BAD88_catalog;
    int auto2A1BAD88_i;

    // Variable Initialization
    lv_isBWMap = (PointFromName("BWMap") != null);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_SC1ToggleFeature(libSCBW_ge_SC1_Feature_CorrectedRefunds, true);
    libSCBW_gf_SC1ToggleFeature(libSCBW_ge_SC1_Feature_FractionalLifeArmor, true);
    libSCBW_gf_SC1ToggleFeature(libSCBW_ge_SC1_Feature_HighgroundAdvantage, true);
    libBWVS_gf_SetFoWState();
    libSCBW_gf_SC1ToggleFeature(libSCBW_ge_SC1_Feature_SC2toSC1UnitSwap, true);
    if ((lv_isBWMap == false)) {
        libBWVS_gf_RemoveGeysers();
    }
    else {
        libBWVS_gf_UpdateLegacyMap();
    }
    autoEABAE26A_g = PlayerGroupAll();
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(autoEABAE26A_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        autoE48FA8EA_val = PlayerRace(lv_playerIndex);
        if (autoE48FA8EA_val == ("Terr")) {
            PlayerSetRace(lv_playerIndex, "BWTe");
        }
        else if (autoE48FA8EA_val == ("Prot")) {
            PlayerSetRace(lv_playerIndex, "BWPr");
        }
        else if (autoE48FA8EA_val == ("Zerg")) {
            PlayerSetRace(lv_playerIndex, "BWZe");
        }
        else {
        }
        if ((PlayerType(lv_playerIndex) == c_playerTypeUser)) {
            libNtve_gf_HideGameUI(false, PlayerGroupSingle(lv_playerIndex));
            libNtve_gf_HideGameUI(true, PlayerGroupSingle(lv_playerIndex));
        }

    }
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    autoCFBAF88E_g = PlayerGroupActive();
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(autoCFBAF88E_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        auto2A1BAD88_catalog = c_gameCatalogUnit;
        auto2A1BAD88_i = 1;
        for ( ; auto2A1BAD88_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto2A1BAD88_i += 1 ) {
            lv_unitType = CatalogEntryGet(auto2A1BAD88_catalog, auto2A1BAD88_i);
            if ((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Race", c_playerAny) != "BWTe") && (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Race", c_playerAny) != "BWZe") && (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "Race", c_playerAny) != "BWPr")) {
                TechTreeUnitHelp(lv_playerIndex, lv_unitType, false);
            }

        }
    }
    Wait(0.0625, c_timeGame);
    if ((lv_isBWMap == false)) {
        libBWVS_gf_IncreaseResourceCounts();
    }
    else {
        libBWVS_gf_UpdateLegacyMap();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBWVS_gt_MapInitialization_Init () {
    libBWVS_gt_MapInitialization = TriggerCreate("libBWVS_gt_MapInitialization_Func");
    TriggerAddEventMapInit(libBWVS_gt_MapInitialization);
}

void libBWVS_InitTriggers () {
    libBWVS_gt_MapInitialization_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libBWVS_InitLib_completed = false;

void libBWVS_InitLib () {
    if (libBWVS_InitLib_completed) {
        return;
    }

    libBWVS_InitLib_completed = true;

    libBWVS_InitLibraries();
    libBWVS_InitCustomScript();
    libBWVS_InitTriggers();
}

