//==================================================================================================
//  Swarm Terran Melee AI
//==================================================================================================

include "TriggerLibs/BWTerran/BWTerranVyEy" //Very Easy
include "TriggerLibs/BWTerran/BWTerranEasy" //Easy
include "TriggerLibs/BWTerran/BWTerranMedi" //Medium
include "TriggerLibs/BWTerran/BWTerranMdHd" //Hard
include "TriggerLibs/BWTerran/BWTerranHard" //Harder
include "TriggerLibs/BWTerran/BWTerranHdVH" //Very Hard
include "TriggerLibs/BWTerran/BWTerranVyHd" //Elite
include "TriggerLibs/BWTerran/BWTerranChVi" //CH Vision
include "TriggerLibs/BWTerran/BWTerranChRe" //CH Resources
include "TriggerLibs/BWTerran/BWTerranChIn" //CH Insane

//--------------------------------------------------------------------------------------------------
//  Counter-Attack Units
//--------------------------------------------------------------------------------------------------
static void InitCounters (int player) {
    // versus BWProtoss
    AICounterUnitSetup(player, c_BWPU_Zealot,             1.00, c_BWTU_Firebat,        1.00, c_BWTU_Firebat);
    AICounterUnitSetup(player, c_BWPU_Dragoon,            1.00, c_BWTU_Marine,         1.00, c_BWTU_SiegeTank);
    AICounterUnitSetup(player, c_BWPU_HighTemplar,        1.00, c_BWTU_Firebat,        1.00, c_BWTU_ScienceVessel);
    AICounterUnitSetup(player, c_BWPU_DarkTemplar,        1.50, c_BWTU_Firebat,        1.00, c_BWTU_Marine);
    AICounterUnitSetup(player, c_BWPU_Archon,             1.20, c_BWTU_ScienceVessel,  1.00, c_BWTU_Marine);
    AICounterUnitSetup(player, c_BWPU_DarkArchon,         1.20, c_BWTU_ScienceVessel,  1.00, c_BWTU_Marine);
    AICounterUnitSetup(player, c_BWPU_Reaver,             1.50, c_BWTU_Ghost,          1.50, c_BWTU_Ghost);
    AICounterUnitSetup(player, c_BWPU_Scout,              1.50, c_BWTU_Wraith,         1.00, c_BWTU_Valkyrie);
    AICounterUnitSetup(player, c_BWPU_Corsair,            2.00, c_BWTU_Marine,         2.00, c_BWTU_Goliath);
    AICounterUnitSetup(player, c_BWPU_Carrier,            3.00, c_BWTU_Goliath,        2.50, c_BWTU_Wraith);
    AICounterUnitSetup(player, c_BWPU_Arbiter,            1.00, c_BWTU_Wraith,         1.00, c_BWTU_Goliath);
    AICounterUnitSetup(player, c_BWPB_PhotonCannon,       3.00, c_BWTU_Firebat,        1.00, c_BWTU_Battlecruiser);

    // versus BWTerran
    AICounterUnitSetup(player, c_BWTU_Marine,             1.00, c_BWTU_Marine,         0.20, c_BWTU_SiegeTank);
    AICounterUnitSetup(player, c_BWTU_Firebat,            1.00, c_BWTU_Firebat,        0.80, c_BWTU_Marine);
    AICounterUnitSetup(player, c_BWTU_Medic,              0.60, c_BWTU_Marine,         0.60, c_BWTU_Firebat);
    AICounterUnitSetup(player, c_BWTU_Ghost,              0.60, c_BWTU_Marine,         0.60, c_BWTU_ScienceVessel);
    AICounterUnitSetup(player, c_BWTU_Vulture,            1.00, c_BWTU_Vulture,        0.60, c_BWTU_SiegeTank);
    AICounterUnitSetup(player, c_BWTU_SiegeTank_Alias,    1.00, c_BWTU_SiegeTank,      0.90, c_BWTU_Ghost);
    AICounterUnitSetup(player, c_BWTU_Goliath,            4.00, c_BWTU_Marine,         2.00, c_BWTU_SiegeTank);
    AICounterUnitSetup(player, c_BWTU_Valkyrie,           2.00, c_BWTU_Valkyrie,       1.00, c_BWTU_Valkyrie);
    AICounterUnitSetup(player, c_BWTU_Dropship,           1.60, c_BWTU_Wraith,         1.70, c_BWTU_Goliath);
    AICounterUnitSetup(player, c_BWTU_ScienceVessel,      1.50, c_BWTU_Wraith,         1.00, c_BWTU_Goliath);
    AICounterUnitSetup(player, c_BWTU_Wraith,             1.50, c_BWTU_Valkyrie,       1.50, c_BWTU_Goliath);
    AICounterUnitSetup(player, c_BWTU_Battlecruiser,      2.50, c_BWTU_Wraith,         2.00, c_BWTU_Ghost);
    AICounterUnitSetup(player, c_BWTB_Bunker,             3.00, c_BWTU_Battlecruiser,  1.00, c_BWTU_SiegeTank);
    AICounterUnitSetup(player, c_BWTB_MissileTurret,      3.00, c_BWTU_Marine,         1.00, c_BWTU_Goliath);
    AICounterUnitSetup(player, c_BWTU_SpiderMine_Alias,   1.00, c_BWTU_Vulture,        0.40, c_BWTU_ScienceVessel);
       
    // versus BWZerg
    AICounterUnitSetup(player, c_BWZU_Zergling,           1.00, c_BWTU_Firebat,        0.60, c_BWTU_Marine);
    AICounterUnitSetup(player, c_BWZU_Hydralisk,          0.70, c_BWTU_Vulture,        0.50, c_BWTU_Firebat);
    AICounterUnitSetup(player, c_BWZU_Queen,              0.80, c_BWTU_Wraith,         0.80, c_BWTU_Goliath);
    AICounterUnitSetup(player, c_BWZU_InfestedTerran,     1.00, c_BWTU_Marine,         0.60, c_BWTU_SiegeTank);
    AICounterUnitSetup(player, c_BWZU_Mutalisk,           1.50, c_BWTU_Valkyrie,       1.50, c_BWTU_Goliath);
    AICounterUnitSetup(player, c_BWZU_Devourer,           1.50, c_BWTU_Valkyrie,       1.00, c_BWTU_Wraith);
    AICounterUnitSetup(player, c_BWZU_Ultralisk,          1.00, c_BWTU_Marine,         1.00, c_BWTU_SiegeTank);
    AICounterUnitSetup(player, c_BWZU_Guardian,           1.20, c_BWTU_Wraith,         1.00, c_BWTU_Goliath);
    AICounterUnitSetup(player, c_BWZB_SunkenColony,       2.50, c_BWTU_Firebat,        0.50, c_BWTU_Battlecruiser);
    AICounterUnitSetup(player, c_BWZB_SporeColony,        3.00, c_BWTU_Marine,         3.00, c_BWTU_Marine);
    AICounterUnitSetup(player, c_BWZU_Scourge,            1.00, c_BWTU_Marine,         1.00, c_BWTU_Valkyrie);
    AICounterUnitSetup(player, c_BWZU_Defiler,            1.00, c_BWTU_Firebat,        1.00, c_BWTU_Marine);
    AICounterUnitSetup(player, c_BWZU_Lurker,             2.50, c_BWTU_Firebat,        0.75, c_BWTU_SiegeTank);
}

//--------------------------------------------------------------------------------------------------
//  BWTerranSubStateName
//--------------------------------------------------------------------------------------------------
string BWTerranSubStateName (int state) {
    // TODO Call the individual difficulties to return a real substate name
    return "-" + IntToString(state) + "-";
}

//--------------------------------------------------------------------------------------------------
//  DebugCallbackBWTe
//--------------------------------------------------------------------------------------------------
void DebugCallbackBWTe (int player) {
    DebugAI("=====BWTERRAN=====\n");
    DebugMelee(player);
    DebugAI("e_mainState = "        + MainStateName(AIState(player, e_mainState))           +
            ", e_mainSubState = "   + BWTerranSubStateName(AIState(player, e_mainSubState))   +
            ", e_attackState = "    + AttackStateName(AIState(player, e_attackState))
    );
}

//--------------------------------------------------------------------------------------------------
//  AINewUnitBWTe
//--------------------------------------------------------------------------------------------------
void AINewUnitBWTe (int player, unit u) {
    wave w;
    string type = UnitGetType(u);

    // ignored units
    //
    if (type == c_BWTU_SpiderMine_Alias) {
        return;
    }
    if (UnitTypeTestAttribute(type, c_unitAttributeStructure)) {
        return;
    }
    if (UnitTypeTestFlag(type, c_unitFlagWorker)) {
        return;
    }
    
    // detector
    //
    if (type == c_BWTU_ScienceVessel) {
        AINewDetector(player, u, false);
        return;
    }

    // clear obstacle units
    //
    if (AIWaveNeedClearObsUnits(player)) {
        if (type == c_BWTU_Marine || type == c_BWTU_Firebat) {
            AIMergeUnit(player, u, AIWaveGet(player, c_waveClearObs));
            return;
        }
    }

    // diversion units
    if (AIGetFlag(player, e_flagsDiversion)) {
        if (type == c_BWTU_Vulture) {
            AIMergeUnit(player, u, AIWaveGet(player, c_waveDivert1));
            return;
        }
        if (type == c_BWTU_Wraith) {
            AIMergeUnit(player, u, AIWaveGet(player, c_waveDivert2));
            return;
        }
    }

    // medic
    //
    if (type == c_BWTU_Medic) {
        if (AINumEnemyBuildings(player) == 0) {
            if (AIOfferNewScout(player, u)) {
                return;
            }
        }

        AIWaveAddUnitPriority(AIWaveGet(player, c_waveMain), u, c_prioWavePeon);
        return;
    }

    // main wave units
    //
    AINewUnitDefault(player, u);
}

//--------------------------------------------------------------------------------------------------
//  AIGetScoutBWTe
//--------------------------------------------------------------------------------------------------
unit AIGetScoutBWTe (int player, int index, unit prev, bool allowWorkers) {
    unit medivac;
    string prevType = UnitGetType(prev);
    
    if (!PlayerBeaconIsSet(player, c_beaconScout) &&
        !AIGetFlag(player, e_flagsScouting)) {
        // if no scouting beacons are set and we're not ready to scout, don't return a unit
        return c_nullUnit;
    }

    if (index == 1 && PlayerBeaconIsSet(player, c_beaconScout)) {
        AISetFlag(player, e_flagsScouting, true);
        if (allowWorkers) {
            // only return a worker, we want to claim a tower
            if (prevType == c_BWTU_SCV) {
                return prev;
            } 
            return AIGrabUnit(player, c_BWTU_SCV, c_prioScout, null);
        }
    }

    if (AINumEnemyBuildings(player) == 0) {
        // only use medivac scouts if we don't know of any enemy buildings
        //   (ie we need a flying scout to check other islands etc).
        if (prevType == c_BWTU_Dropship) {
            return prev;
        }
        medivac = AIGrabUnit(player, c_BWTU_Dropship, c_prioScout, null);
        if (medivac) {
            return medivac;
        }
    }

    if (prev) {
        return prev;
    }

    // back to allowing workers as late scouts
    //if (AIGetFlag(player, e_flagsLateScout)) {
    //    return c_nullUnit;
    //}
    if (!allowWorkers) {
        return c_nullUnit;
    }
    return AIGrabUnit(player, c_BWTU_SCV, c_prioScout, null);
}

//--------------------------------------------------------------------------------------------------
//  AIEarlyDefScoutBWTe
//--------------------------------------------------------------------------------------------------
unit AIEarlyDefScoutBWTe (int player, unit prev, bool allowWorkers) {
    unit obs;
    string prevType;
    
    if (!AIGetFlag(player, e_flagsEarlyDefScout)) {
        return c_nullUnit;
    }
    prevType = UnitGetType(prev);
    if (prevType == c_BWTU_Dropship) {
        return prev;
    }
    obs = AIGrabUnit(player, c_BWTU_Dropship, c_prioScout, null);
    if (obs) {
        return obs;
    }
    if (prevType == c_BWTU_Marine) {
        return prev;
    }
    obs = AIGrabUnit(player, c_BWTU_Marine, c_prioScout, null);
    if (obs) {
        return obs;
    }
    if (prev) {
        return prev;
    }
    if (!allowWorkers) {
        return c_nullUnit;
    }
    return AIGrabUnit(player, c_BWTU_SCV, c_prioScout, null);
}

//--------------------------------------------------------------------------------------------------
//  AIWaveThinkBWTe
//--------------------------------------------------------------------------------------------------
void AIWaveThinkBWTe (int player, wave w, int type) {
    AIWaveThinkDefault(player, w, type);
}

//--------------------------------------------------------------------------------------------------
//  BWTerran Init
//--------------------------------------------------------------------------------------------------
static void BWTerranInit (int player) {

    InitCounters(player);
    AIMeleeSharedInit(player);
    AISetFlag(player, e_flagsScouting, false);
    AISetFlag(player, e_flagsEarlyDefScout, false);
    AIReqAddSpecialMaker("ComsatStationSCBW", "CommandCenterSCBW", "CommandCenterSCBW@AddOns", 0);
    AIReqAddSpecialMaker("NuclearSiloSCBW", "CommandCenterSCBW", "CommandCenterSCBW@AddOns", 1);
    AITechCountFixupEither(player, "CommandCenterSCBW", "ComsatStationSCBW", "NuclearSiloSCBW");
    //AITechCountFixupEither(player, c_TB_CommandCenter, c_TB_OrbitalCommand, c_TB_PlanetaryFortress);  // done in BaseAI now
    AISetDefaultArmyUnit(player, c_BWTU_Marine);
    AISetDefaultTownHall(player, c_BWTB_CommandCenter);
    BWAISetNukeConstants(player);
    AIReqAddSpecialMaker(c_BWTU_Nuke, c_BWTB_NuclearSilo, "NukeSCBWArm", 0);

    AISetMainState(player, e_mainState_Open, e_mainSubState_Init);

    // All AI scripts are finished no need to display warnings

    //if (AIPlayerDifficulty(player) > c_skirChMoney) {
    //    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("BWTerran AI: Cheater Insane AI is not supported at this time, please use at the most Cheater Resources"));
    //}

    //if (AIPlayerDifficulty(player) < c_skirMedium) {
    //    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("BWTerran AI: Difficulties below Medium are not supported at this time, please use at most Harder difficulty for this AI"));
    //}
}

//--------------------------------------------------------------------------------------------------
void BWTerranOpen (int player);
void BWTerranMid (int player);
void BWTerranLate (int player);

//--------------------------------------------------------------------------------------------------
//  AIMeleeBWTe
//--------------------------------------------------------------------------------------------------
void AIMeleeBWTe (int player) {
    int mainState = AIState(player, e_mainState);

    if (AIPlayerDifficulty(player) >= c_skirChMoney) {
        AIMeleeCheatResources(player);
    }

    if (mainState == e_mainState_Init)              { BWTerranInit(player);     }
    else if (mainState == e_mainState_Open)         { BWTerranOpen(player);     }
    else if (mainState == e_mainState_Mid)          { BWTerranMid(player);      }
    else if (mainState == e_mainState_Late)         { BWTerranLate(player);     }
    else { ErrorMeleeScript(player, "Invalid mainState"); }
}


void BWTerranOpen (int player) {
    int diff = AIPlayerDifficulty(player);

    if (diff == c_skirVeryEasy)       { BWTerranOpenVyEy(player); }
    else if (diff == c_skirEasy)      { BWTerranOpenEasy(player); }
    else if (diff == c_skirMedium)    { BWTerranOpenMedi(player); }
    else if (diff == c_skirMed_Hard)  { BWTerranOpenMdHd(player); }
    else if (diff == c_skirHard)      { BWTerranOpenHard(player); }
    else if (diff == c_skirHard_VH)   { BWTerranOpenHdVH(player); }
    else if (diff == c_skirVeryHard)  { BWTerranOpenVyHd(player); }
    else if (diff == c_skirChVision)  { BWTerranOpenChVi(player); }
    else if (diff == c_skirChMoney)   { BWTerranOpenChRe(player); }
    else                              { BWTerranOpenChIn(player); }
}

void BWTerranMid (int player) {
    int diff = AIPlayerDifficulty(player);

    if (diff == c_skirVeryEasy)       { BWTerranMidVyEy(player); }
    else if (diff == c_skirEasy)      { BWTerranMidEasy(player); }
    else if (diff == c_skirMedium)    { BWTerranMidMedi(player); }
    else if (diff == c_skirMed_Hard)  { BWTerranMidMdHd(player); }
    else if (diff == c_skirHard)      { BWTerranMidHard(player); }
    else if (diff == c_skirHard_VH)   { BWTerranMidHdVH(player); }
    else if (diff == c_skirVeryHard)  { BWTerranMidVyHd(player); }
    else if (diff == c_skirChVision)  { BWTerranMidChVi(player); }
    else if (diff == c_skirChMoney)   { BWTerranMidChRe(player); }
    else                              { BWTerranMidChIn(player); }
}

void BWTerranLate (int player) {
    int diff = AIPlayerDifficulty(player);

    if (diff == c_skirVeryEasy)       { BWTerranLateVyEy(player); } //Very Easy
    else if (diff == c_skirEasy)      { BWTerranLateEasy(player); } //Easy
    else if (diff == c_skirMedium)    { BWTerranLateMedi(player); } //Medium
    else if (diff == c_skirMed_Hard)  { BWTerranLateMdHd(player); } //Hard
    else if (diff == c_skirHard)      { BWTerranLateHard(player); } //Harder
    else if (diff == c_skirHard_VH)   { BWTerranLateHdVH(player); } //Very Hard
    else if (diff == c_skirVeryHard)  { BWTerranLateVyHd(player); } //Elite
    else if (diff == c_skirChVision)  { BWTerranLateChVi(player); } //CH Vision
    else if (diff == c_skirChMoney)   { BWTerranLateChRe(player); } //CH Resources
    else                              { BWTerranLateChIn(player); } //CH Insane
}

//void TerranOpen (int player) {
//    int diff = AIPlayerDifficulty(player);
//
//    if (diff == c_skirVeryEasy)       { TerranOpenVyEy(player); } //Very Easy
//    else if (diff == c_skirEasy)      { TerranOpenEasy(player); } //Easy
//    else if (diff == c_skirMedium)    { TerranOpenMedi(player); } //Medium
//    else if (diff == c_skirMed_Hard)  { TerranOpenMdHd(player); } //Hard
//    else if (diff == c_skirHard)      { TerranOpenHard(player); } //Harder
//    else if (diff == c_skirHard_VH)   { TerranOpenHdVH(player); } //Very Hard
//    else if (diff == c_skirVeryHard)  { TerranOpenVyHd(player); } //Elite
//    else if (diff == c_skirChVision)  { TerranOpenChVi(player); } //CH Vision
//    else if (diff == c_skirChMoney)   { TerranOpenChRe(player); } //CH Resources
//    else                              { TerranOpenChIn(player); } //CH Insane
//}
