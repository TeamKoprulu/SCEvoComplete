//==================================================================================================
//  BWTerran Easy Skirmish AI
//  This is a generated file. Do not edit directly.
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  BWTerranUpgradesEasy
//--------------------------------------------------------------------------------------------------
void BWTerranUpgradesEasy (int player, int phase) {
    int buildType;

    if (phase < c_ldPhaseLate) {
        buildType = AIGetUserInt(player, c_openingBuildType);
    } else {
        buildType = AIGetUserInt(player, c_lateGameBuildType);
    }

    if (buildType != e_buildType_Air) {


        if (phase >= c_ldPhaseMid) {


            if (phase >= c_ldPhaseLate) {

                AISetStock( player, 1, c_BWTR_TerranInfantryWeaponsSCBW_Lvl1 );
                AISetStock( player, 1, c_BWTR_TerranInfantryArmorsSCBW_Lvl1 );

                if (phase >= c_ldPhaseFinal) {

                    AISetStock( player, 1, c_BWTR_TerranInfantryWeaponsSCBW_Lvl2 );
                    AISetStock( player, 1, c_BWTR_TerranInfantryArmorsSCBW_Lvl2 );
                    AISetStock( player, 1, c_BWTR_TerranVehiclePlatingSCBW_Lvl1 );
                    AISetStock( player, 1, c_BWTR_TerranShipWeaponsSCBW_Lvl1 );
                    AISetStock( player, 1, c_BWTR_TerranShipPlatingSCBW_Lvl1 );

                }
            }
        }
    }
    else {  // (buildType == e_buildType_Air) 


        if (phase >= c_ldPhaseMid) {


            if (phase >= c_ldPhaseLate) {

                AISetStock( player, 1, c_BWTR_TerranShipWeaponsSCBW_Lvl1 );
                AISetStock( player, 1, c_BWTR_TerranShipPlatingSCBW_Lvl1 );

                if (phase >= c_ldPhaseFinal) {

                    AISetStock( player, 1, c_BWTR_TerranShipWeaponsSCBW_Lvl2 );
                    AISetStock( player, 1, c_BWTR_TerranShipPlatingSCBW_Lvl2 );
                    AISetStock( player, 1, c_BWTR_TerranInfantryWeaponsSCBW_Lvl1 );
                    AISetStock( player, 1, c_BWTR_TerranInfantryArmorsSCBW_Lvl1 );

                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  BWTerranOpenArmyInitEasy
//--------------------------------------------------------------------------------------------------
int BWTerranOpenArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        // next attack should be around 5 foodCost and 300 resCost after about 375 seconds
        AIAddToStockArmy(player, c_BWTU_Marine, 3);
        AIAddToStockArmy(player, c_BWTU_Firebat, 2);
        // validation: 4 units above with average cost 5 food and 275 resources
        duration = 362 + RandomInt(-12, 18);
    }
    else if (buildType == e_buildType_Timing) {
        // next attack should be around 7 foodCost and 400 resCost after about 431 seconds
        AIAddToStockArmy(player, c_BWTU_Marine, 3);
        AIAddToStockArmy(player, c_BWTU_Firebat, 4);
        // validation: 5 units above with average cost 7 food and 400 resources
        duration = 431 + RandomInt(-14, 21);
    }
    else if (buildType == e_buildType_Power) {
        // next attack should be around 9 foodCost and 540 resCost after about 543 seconds
        AIAddToStockArmy(player, c_BWTU_Marine, 4);
        AIAddToStockArmy(player, c_BWTU_Firebat, 6);
        // validation: 7 units above with average cost 10 food and 575 resources
        duration = 572 + RandomInt(-19, 28);
    }
    else if (buildType == e_buildType_Macro) {
        // next attack should be around 5 foodCost and 300 resCost after about 225 seconds
        AIAddToStockArmy(player, c_BWTU_Marine, 3);
        AIAddToStockArmy(player, c_BWTU_Firebat, 2);
        // validation: 4 units above with average cost 5 food and 275 resources
        duration = 218 + RandomInt(-7, 10);
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 6 foodCost and 600 resCost after about 581 seconds
        AIAddToStockArmy(player, c_BWTU_Wraith, 3);
        // validation: 3 units above with average cost 6 food and 675 resources
        duration = 611 + RandomInt(-20, 30);
    }
    else {
        return BWTerranOpenArmyInitEasy(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  BWTerranOpenInitEasy
//--------------------------------------------------------------------------------------------------
void BWTerranOpenInitEasy (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseOpen, BWTerranOpenArmyInitEasy);

    AISetMainState(player, e_mainState_Open, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  BWTerranOpenBuildEasy
//--------------------------------------------------------------------------------------------------
void BWTerranOpenBuildEasy (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Open, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    if (buildType == e_buildType_Rush) {
        AISetStock( player, 1, c_BWTB_CommandCenter );
        AISetStock( player, 11, c_BWTU_SCV );
        AISetStock( player, 1, c_BWTB_SupplyDepot );
        AISetStock( player, 13, c_BWTU_SCV );
        AISetStock( player, 1, c_BWTB_Barracks );
        AISetStock( player, 1, c_BWTB_Refinery );
        AISetStock( player, 1, c_BWTU_Marine );
        AISetStock( player, 1, c_BWTB_ComsatStation );
        AISetStock( player, 2, c_BWTB_SupplyDepot );
        AISetStock( player, 2, c_BWTU_Marine );
        AISetStockFarms( player, c_BWTB_SupplyDepot, c_stockNormalFarms);
    }
    else if (buildType == e_buildType_Timing) {
        AISetStock( player, 1, c_BWTB_CommandCenter );
        AISetStock( player, 11, c_BWTU_SCV );
        AISetStock( player, 1, c_BWTB_SupplyDepot );
        AISetStock( player, 13, c_BWTU_SCV );
        AISetStock( player, 1, c_BWTB_Barracks );
        AISetStock( player, 1, c_BWTB_Refinery );
        AISetStock( player, 1, c_BWTU_Marine );
        AISetStock( player, 1, c_BWTB_ComsatStation );
        AISetStock( player, 2, c_BWTB_SupplyDepot );
        AISetStock( player, 2, c_BWTU_Marine );
        AISetStockFarms( player, c_BWTB_SupplyDepot, c_stockNormalFarms);
        AISetStock( player, 2, c_BWTB_Refinery );
    }
    else if (buildType == e_buildType_Power) {
        AISetStock( player, 1, c_BWTB_CommandCenter );
        AISetStock( player, 11, c_BWTU_SCV );
        AISetStock( player, 1, c_BWTB_SupplyDepot );
        AISetStock( player, 13, c_BWTU_SCV );
        AISetStock( player, 1, c_BWTB_Barracks );
        AISetStock( player, 1, c_BWTB_Refinery );
        AISetStock( player, 1, c_BWTU_Marine );
        AISetStock( player, 1, c_BWTB_ComsatStation );
        AISetStock( player, 2, c_BWTB_SupplyDepot );
        AISetStock( player, 2, c_BWTU_Marine );
        AISetStockFarms( player, c_BWTB_SupplyDepot, c_stockNormalFarms);
        AISetStock( player, 2, c_BWTB_Refinery );
    }
    else if (buildType == e_buildType_Macro) {
        AISetStock( player, 1, c_BWTB_CommandCenter );
        AISetStock( player, 11, c_BWTU_SCV );
        AISetStock( player, 1, c_BWTB_SupplyDepot );
        AISetStock( player, 13, c_BWTU_SCV );
        AISetStock( player, 1, c_BWTB_Barracks );
        if (BWTerranMacroExpand(player)) { return; }
        AISetStock( player, 1, c_BWTU_Marine );
        AISetStock( player, 1, c_BWTB_ComsatStation );
        AISetStock( player, 2, c_BWTB_SupplyDepot );
        AISetStock( player, 2, c_BWTU_Marine );
        AISetStock( player, 1, c_BWTB_Refinery );
        AISetStockUnitNext( player, 19, c_BWTU_SCV, c_stockIdle );
        AISetStockFarms( player, c_BWTB_SupplyDepot, c_stockNormalFarms);
        AISetStock( player, 2, c_BWTB_Refinery );
    }
    else if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_BWTB_CommandCenter );
        AISetStock( player, 11, c_BWTU_SCV );
        AISetStock( player, 1, c_BWTB_SupplyDepot );
        AISetStock( player, 13, c_BWTU_SCV );
        if (BWTerranMacroExpand(player)) { return; }
        AISetStock( player, 1, c_BWTB_Refinery );
        AISetStock( player, 1, c_BWTB_Barracks );
        AISetStock( player, 2, c_BWTB_Refinery );
        AISetStock( player, 2, c_BWTB_SupplyDepot );
        AISetStock( player, 1, c_BWTB_Factory );
        AISetStock( player, 1, c_BWTB_ComsatStation );
        AISetStockUnitNext( player, 19, c_BWTU_SCV, c_stockIdle );
        AISetStockFarms( player, c_BWTB_SupplyDepot, c_stockNormalFarms);
        AISetStock( player, 1, c_BWTB_Starport );
        AISetStock( player, 1, c_BWTB_ControlTower );
    }

    BWTerranBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    BWTerranGeneralBuild(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 0.70);

    BWTerranUpgradesEasy(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 19, c_BWTU_SCV);

    BWTerranTechUp(player, c_ldPhaseOpen);

    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_BWTU_Dropship );
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Mid, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  BWTerranMidArmyInitEasy
//--------------------------------------------------------------------------------------------------
int BWTerranMidArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        // next attack should be around 10 foodCost and 600 resCost after about 340 seconds
        AIAddToStockArmy(player, c_BWTU_Marine, 4);
        AIAddToStockArmy(player, c_BWTU_Firebat, 4);
        AIAddToStockArmyPickFrom2Count(player, c_BWTU_Firebat, 2, c_TU_Reaper, 2);
        // validation: 8 units above with average cost 10 food and 612 resources
        duration = 342 + RandomInt(-11, 17);
    }
    else if (buildType == e_buildType_Timing) {
        // next attack should be around 13 foodCost and 760 resCost after about 380 seconds
        AIAddToStockArmy(player, c_BWTU_Marine, 6);
        AIAddToStockArmy(player, c_BWTU_Firebat, 2);
        AIAddToStockArmyPickFrom2Count(player, c_BWTU_Firebat, 2, c_BWTU_Marine, 2);
        AIAddToStockArmyPickFrom2Count(player, c_BWTU_Firebat, 2, c_BWTU_Firebat, 2);
        // validation: 12 units above with average cost 14 food and 874 resources
        duration = 411 + RandomInt(-13, 20);
    }
    else if (buildType == e_buildType_Power) {
        // next attack should be around 13 foodCost and 790 resCost after about 400 seconds
        AIAddToStockArmy(player, c_BWTU_Marine, 8);
        AIAddToStockArmy(player, c_BWTU_Firebat, 4);
        AIAddToStockArmyPickFrom2Count(player, c_BWTU_Firebat, 2, c_TU_Reaper, 2);
        // validation: 12 units above with average cost 14 food and 812 resources
        duration = 412 + RandomInt(-13, 20);
    }
    else if (buildType == e_buildType_Macro) {
        // next attack should be around 18 foodCost and 1080 resCost after about 581 seconds
        // note: mid macro build did not send opening attack at 225 time
        AIAddToStockArmy(player, c_BWTU_Marine, 8);
        AIAddToStockArmy(player, c_BWTU_Firebat, 8);
        AIAddToStockArmyPickFrom2Count(player, c_BWTU_Firebat, 2, c_TU_Reaper, 2);
        AIAddToStockArmyPickFrom2Count(player, c_BWTU_Firebat, 2, c_TU_Reaper, 2);
        // validation: 16 units above with average cost 20 food and 1224 resources
        duration = 648 + RandomInt(-29, 43);
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 9 foodCost and 900 resCost after about 380 seconds
        AIAddToStockArmy(player, c_BWTU_Wraith, 2);
        AIAddToStockArmy(player, c_BWTU_Valkyrie, 1);
        AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Wraith, c_BWTU_Valkyrie), 1);
        // validation: 4 units above with average cost 10 food and 937 resources
        duration = 397 + RandomInt(-13, 19);
    }
    else {
        return BWTerranMidArmyInitEasy(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  BWTerranMidInitEasy
//--------------------------------------------------------------------------------------------------
void BWTerranMidInitEasy (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseMid, BWTerranMidArmyInitEasy);

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Mid, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  BWTerranMidBuildEasy
//--------------------------------------------------------------------------------------------------
void BWTerranMidBuildEasy (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Mid, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    BWTerranBasicEconomy(player, c_ldPhaseMid, 16);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_BWTU_Dropship );
    }
    BWTerranBasicExpansion(player, c_ldPhaseMid, 5500, 1500);

    BWTerranBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    BWTerranGeneralBuild(player, c_ldPhaseMid);

    AILDStockWorkers( player, 19, c_BWTU_SCV);

    if (buildType == e_buildType_Rush) {
    }
    else if (buildType == e_buildType_Timing) {
    }
    else if (buildType == e_buildType_Power) {
        if (BWTerranMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Macro) {
        if (BWTerranMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Air) {
        if (BWTerranMacroExpand(player)) { return; }
        AISetStock( player, 2, c_BWTB_Starport );
        AISetStock( player, 2, c_BWTB_ControlTower );
    }

    if (AINeedsDetection(player)) {
        AISetStock( player, 1, c_BWTU_ScienceVessel );
        AISetStock( player, 1, c_BWTB_ComsatStation );
    }

    AISetStockArmyScale(player, 0.70);

    AILDStockWorkers( player, 44, c_BWTU_SCV);

    BWTerranUpgradesEasy(player, c_ldPhaseMid);

    AISetStockArmyScale(player, 1.00);

    AISetStock( player, 2, c_BWTU_ScienceVessel );
    AISetStock( player, 1, c_BWTB_ComsatStation );

    BWTerranTechUp(player, c_ldPhaseMid);

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  BWTerranLateArmyInitEasy
//--------------------------------------------------------------------------------------------------
int BWTerranLateArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        // next attack should be around 17 foodCost and 1000 resCost after about 320 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_BWTU_Marine, 8);
            AIAddToStockArmy(player, c_BWTU_Firebat, 6);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Firebat, 2, c_BWTU_Marine, 2);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Firebat, 2, c_BWTU_Medic, 2);
            // validation: 15 units above with average cost 18 food and 1099 resources
            duration = 337 + RandomInt(-11, 16);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_BWTU_Marine, 8);
            AIAddToStockArmy(player, c_BWTU_Firebat, 4);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Vulture, 2, c_BWTU_Goliath, 1);
            // validation: 14 units above with average cost 20 food and 1150 resources
            duration = 354 + RandomInt(-11, 17);
        }
    }
    else if (buildType == e_buildType_HighTech) {
        // next attack should be around 19 foodCost and 1100 resCost after about 340 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_BWTU_Marine, 6);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 3);
            // validation: 9 units above with average cost 15 food and 1125 resources
            duration = 326 + RandomInt(-10, 16);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_BWTU_Marine, 6);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 1);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Vulture, 2, c_BWTU_Goliath, 1);
            AIAddToStockArmy(player, c_BWTU_Goliath, 3);
            // validation: 10 units above with average cost 19 food and 1325 resources
            duration = 368 + RandomInt(-12, 18);
        }
    }
    else if (buildType == e_buildType_Special) {
        // next attack should be around 20 foodCost and 1200 resCost after about 360 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_BWTU_Marine, 6);
            AIAddToStockArmy(player, c_BWTU_Firebat, 2);
            AIAddToStockArmy(player, c_BWTU_Ghost, 2);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Ghost, 1, c_BWTU_Medic, 2);
            // validation: 12 units above with average cost 16 food and 1400 resources
            duration = 367 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWTU_Marine, 6);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 1);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Vulture, 2, c_BWTU_Goliath, 1);
            AIAddToStockArmy(player, c_BWTU_ScienceVessel, 2);
            // validation: 11 units above with average cost 17 food and 1425 resources
            duration = 374 + RandomInt(-12, 18);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        // next attack should be around 22 foodCost and 1300 resCost after about 380 seconds
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWTU_Marine, 8);
            AIAddToStockArmy(player, c_BWTU_Firebat, 8);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Firebat, 2, c_BWTU_Firebat, 2);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Ghost, 1, c_BWTU_Marine, 2);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Ghost, 1, c_BWTU_Medic, 2);
            // validation: 18 units above with average cost 22 food and 1562 resources
            duration = 411 + RandomInt(-13, 20);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_BWTU_Marine, 6);
            AIAddToStockArmy(player, c_BWTU_Firebat, 4);
            AIAddToStockArmy(player, c_BWTU_Wraith, 1);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 2);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Vulture, 2, c_BWTU_Goliath, 1);
            // validation: 13 units above with average cost 22 food and 1575 resources
            duration = 413 + RandomInt(-13, 20);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWTU_Marine, 6);
            AIAddToStockArmy(player, c_BWTU_Firebat, 2);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Battlecruiser, c_BWTU_Goliath), 1);
            // validation: 10 units above with average cost 19 food and 1425 resources
            duration = 382 + RandomInt(-12, 19);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 13 foodCost and 1300 resCost after about 340 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_BWTU_Wraith, 2);
            AIAddToStockArmy(player, c_BWTU_Valkyrie, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Valkyrie, c_BWTU_Wraith), 2);
            // validation: 6 units above with average cost 15 food and 1425 resources
            duration = 366 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWTU_Wraith, 1);
            AIAddToStockArmy(player, c_BWTU_Battlecruiser, 2);
            // validation: 3 units above with average cost 14 food and 1625 resources
            duration = 381 + RandomInt(-12, 19);
        }
    }
    else {
        return BWTerranLateArmyInitEasy(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  BWTerranFinalArmyInitEasy
//--------------------------------------------------------------------------------------------------
int BWTerranFinalArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        // next attack should be around 27 foodCost and 1600 resCost after about 290 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_BWTU_Marine, 16);
            AIAddToStockArmy(player, c_BWTU_Firebat, 6);
            // validation: 22 units above with average cost 28 food and 1550 resources
            duration = 289 + RandomInt(-9, 14);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_BWTU_Marine, 14);
            AIAddToStockArmy(player, c_BWTU_Firebat, 10);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 1);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Vulture, 2, c_BWTU_Goliath, 1);
            // validation: 22 units above with average cost 31 food and 1850 resources
            duration = 319 + RandomInt(-10, 15);
        }
    }
    else if (buildType == e_buildType_HighTech) {
        // next attack should be around 29 foodCost and 1700 resCost after about 310 seconds
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_BWTU_Marine, 8);
            AIAddToStockArmy(player, c_BWTU_Vulture, 2);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 4);
            // validation: 14 units above with average cost 24 food and 1700 resources
            duration = 297 + RandomInt(-9, 14);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_BWTU_Marine, 8);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 3);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Vulture, 2, c_BWTU_Goliath, 1);
            AIAddToStockArmy(player, c_BWTU_Goliath, 3);
            // validation: 14 units above with average cost 27 food and 1975 resources
            duration = 325 + RandomInt(-10, 16);
        }
    }
    else if (buildType == e_buildType_Special) {
        // next attack should be around 30 foodCost and 1800 resCost after about 330 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_BWTU_Marine, 12);
            AIAddToStockArmy(player, c_BWTU_Firebat, 4);
            AIAddToStockArmy(player, c_BWTU_Ghost, 2);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Ghost, 1, c_BWTU_Firebat, 2);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Ghost, 1, c_BWTU_Medic, 2);
            AIAddToStockArmy(player, c_BWTU_ScienceVessel, 1);
            // validation: 21 units above with average cost 26 food and 2250 resources
            duration = 353 + RandomInt(-11, 17);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWTU_Marine, 12);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 1);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Vulture, 4, c_BWTU_Goliath, 2);
            AIAddToStockArmy(player, c_BWTU_ScienceVessel, 2);
            // validation: 18 units above with average cost 26 food and 1975 resources
            duration = 332 + RandomInt(-11, 16);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        // next attack should be around 32 foodCost and 1900 resCost after about 330 seconds
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWTU_Marine, 16);
            AIAddToStockArmy(player, c_BWTU_Firebat, 16);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Ghost, 1, c_BWTU_Firebat, 2);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Ghost, 1, c_BWTU_Marine, 2);
            // validation: 28 units above with average cost 36 food and 2300 resources
            duration = 369 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_BWTU_Marine, 6);
            AIAddToStockArmy(player, c_BWTU_Firebat, 2);
            AIAddToStockArmy(player, c_BWTU_Vulture, 2);
            AIAddToStockArmy(player, c_BWTU_SiegeTank, 2);
            AIAddToStockArmyPickFrom2Count(player, c_BWTU_Vulture, 2, c_BWTU_Goliath, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Battlecruiser, c_BWTU_Goliath), 3);
            // validation: 15 units above with average cost 30 food and 2150 resources
            duration = 342 + RandomInt(-11, 17);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWTU_Marine, 6);
            AIAddToStockArmy(player, c_BWTU_Firebat, 2);
            AIAddToStockArmy(player, c_BWTU_Wraith, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Wraith, c_BWTU_Valkyrie), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Wraith, c_BWTU_Valkyrie), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Battlecruiser, c_BWTU_Goliath), 1);
            AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Battlecruiser, c_BWTU_Goliath), 1);
            // validation: 13 units above with average cost 29 food and 2449 resources
            duration = 361 + RandomInt(-12, 18);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 18 foodCost and 1800 resCost after about 310 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_BWTU_Wraith, 2);
            AIAddToStockArmy(player, c_BWTU_Valkyrie, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Wraith, c_BWTU_Valkyrie), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_BWTU_Wraith, c_BWTU_Valkyrie), 2);
            // validation: 8 units above with average cost 20 food and 1900 resources
            duration = 325 + RandomInt(-10, 16);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWTU_Wraith, 3);
            AIAddToStockArmy(player, c_BWTU_Battlecruiser, 2);
            // validation: 5 units above with average cost 18 food and 2075 resources
            duration = 329 + RandomInt(-10, 16);
        }
    }
    else {
        return BWTerranFinalArmyInitEasy(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  BWTerranLateInitEasy
//--------------------------------------------------------------------------------------------------
void BWTerranLateInitEasy (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int curPhase = c_ldPhaseLate;
    int buildType = 0;

    AIChooseNextLateGameBuild(player);
    buildType = AIGetUserInt(player, c_lateGameBuildType);

    if (lateLoop <= 0) { // First Late Loop
        AISetupNextArmy (player, buildType, curPhase, BWTerranLateArmyInitEasy);
    } else {
        curPhase = c_ldPhaseFinal + lateLoop;
        AISetupNextArmy (player, buildType, curPhase, BWTerranFinalArmyInitEasy);
    }

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Late, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  BWTerranLateBuildEasy
//--------------------------------------------------------------------------------------------------
void BWTerranLateBuildEasy (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int buildType = AIGetUserInt(player, c_lateGameBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentLateGame(player)) {
        AISetMainState(player, e_mainState_Late, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    BWTerranBasicEconomy(player, c_ldPhaseLate, 16);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_BWTU_Dropship );
    }
    BWTerranBasicExpansion(player, c_ldPhaseLate, 8000, 2000);

    BWTerranBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    BWTerranGeneralBuild(player, c_ldPhaseLate);

    AILDStockWorkers( player, 19, c_BWTU_SCV);

    if (buildType == e_buildType_Core) {
        if (BWTerranMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_HighTech) {
        if (BWTerranMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Special) {
        if (BWTerranMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Mixed) {
        if (BWTerranMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Air) {
        if (BWTerranMacroExpand(player)) { return; }
    }

    AISetStock( player, 2, c_BWTU_ScienceVessel );
    AISetStock( player, 1, c_BWTB_ComsatStation );

    AISetStockArmyScale(player, 0.70);

    AISetStock( player, 1, c_BWTU_Dropship );
    AISetStock( player, 3, c_BWTU_Medic );
    AISetStock( player, 3, c_BWTU_ScienceVessel );

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 44, c_BWTU_SCV);

    if (lateLoop <= 0) { // First Late Loop
        BWTerranUpgradesEasy(player, c_ldPhaseLate);
        BWTerranTechUp(player, c_ldPhaseLate);
    } else { // Remaining Loops
        BWTerranUpgradesEasy(player, c_ldPhaseFinal);
        BWTerranTechUp(player, c_ldPhaseFinal);
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
    if (nextState) {
        lateLoop += 1;
        AISetUserInt(player, c_ldNumLateLoops, lateLoop);
    }
}

//--------------------------------------------------------------------------------------------------
//  BWTerranOpenEasy
//--------------------------------------------------------------------------------------------------
void BWTerranOpenEasy (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        BWTerranOpenInitEasy(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { BWTerranOpenBuildEasy(player); }
    else { ErrorMeleeScript(player, "Invalid Open MainSubState BWTerranEasy"); }
}

//--------------------------------------------------------------------------------------------------
//  BWTerranMidEasy
//--------------------------------------------------------------------------------------------------
void BWTerranMidEasy (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        BWTerranMidInitEasy(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { BWTerranMidBuildEasy(player);  }
    else { ErrorMeleeScript(player, "Invalid Mid MainSubState BWTerranEasy"); }
}

//--------------------------------------------------------------------------------------------------
//  BWTerranLateEasy
//--------------------------------------------------------------------------------------------------
void BWTerranLateEasy (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        BWTerranLateInitEasy(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { BWTerranLateBuildEasy(player);  }
    else { ErrorMeleeScript(player, "Invalid Late MainSubState BWTerranEasy"); }
}

