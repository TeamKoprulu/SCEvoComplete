//==================================================================================================
//  BWProtoss Melee Cheater-Vision
//==================================================================================================

// uses the very hard builds, but cheats vision to make better counters and stop cheese

//--------------------------------------------------------------------------------------------------
//  BWProtossOpenChVi
//--------------------------------------------------------------------------------------------------
void BWProtossOpenChVi (int player) {
    bool done = false;
    int buildIndex;

    AIEarlyDefenseScouting(player);

    // see if we need to switch builds
    UpdateHDBWProtossOpening(player);
    
    buildIndex = AIGetUserInt(player, c_currentBuildIndex);
    if (buildIndex == e_BWhdBuildIndex_POpenRush_ZealotStalker)               { done = BWProtossOpenRushZealotStalkerVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenRush_Adept)                  { done = BWProtossOpenRushAdeptVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenRush_ProxyGate)              { done = BWProtossOpenRushProxyGateVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenRush_CannonRush)             { done = BWProtossOpenRushCannonRushVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenTiming_FourGate)             { done = BWProtossOpenTimingFourGateVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenTiming_Adept)                { done = BWProtossOpenTimingAdeptVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenTiming_GateImmortal)         { done = BWProtossOpenTimingGateImmortalVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenTiming_StalkerBlink)         { done = BWProtossOpenTimingStalkerBlinkVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenTiming_DTRush)               { done = BWProtossOpenTimingDTRushVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenPowerMacro_QuickExpGnd)      { done = BWProtossOpenPowerMacroQuickExpGndVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenPowerMacro_GateExpGnd)       { done = BWProtossOpenPowerMacroGateExpGndVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenPowerMacro_DefenseExpGnd)    { done = BWProtossOpenPowerMacroDefenseExpGndVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenAir_OneBaseAir)              { done = BWProtossOpenAirOneBaseAirVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenAir_OneBaseDrop)             { done = BWProtossOpenAirOneBaseDropVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_POpenAir_QuickExpandAir)          { done = BWProtossOpenAirQuickExpandAirVyHd (player); }
    else { ErrorMeleeScript(player, "Invalid Open BuildIndex BWProtossChVi"); }

    if (done) {
        BWProtossHDInitMid(player); // Transition to MidGame
    }
}

//--------------------------------------------------------------------------------------------------
//  BWProtossMidChVi
//--------------------------------------------------------------------------------------------------
void BWProtossMidChVi (int player) {
    bool done = false;
    int buildIndex;
    
    // enable scouting as appropriate
    if (AIGetUserInt(player, c_numGroundStartLocs) > 0) {
        AIScoutingEnable(player, 12, c_BWPU_Probe);
        AIEarlyDefenseScouting(player);
    }
    else {
        AIScoutingEnable(player, 1, c_BWPU_Observer);
    }

    // see if we need to switch builds
    UpdateHDBWProtossMidGame(player);
    
    buildIndex = AIGetUserInt(player, c_currentBuildIndex);
    if (buildIndex == e_BWhdBuildIndex_PMidRushTiming_FourGateRobo)           { done = BWProtossMidRushTimingFourGateRoboVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidRushTiming_DefensiveExpand)   { done = BWProtossMidRushTimingDefensiveExpandVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidPower_SevenGateStalker)       { done = BWProtossMidPowerSevenGateStalkerVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidPower_SevenGateAdept)         { done = BWProtossMidPowerSevenGateAdeptVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidPower_GateImmortal)           { done = BWProtossMidPowerGateImmortalVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidPower_GateColossi)            { done = BWProtossMidPowerGateColossiVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidPower_GateAir)                { done = BWProtossMidPowerGateAirVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidPower_GateVoidPhoenix)        { done = BWProtossMidPowerGateVoidPhoenixVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidMacro_GateRobo)               { done = BWProtossMidMacroGateRoboVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidMacro_GateAir)                { done = BWProtossMidMacroGateAirVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidAir_OneBasePureAir)           { done = BWProtossMidAirOneBasePureAirVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidAir_OneBasePureDrop)          { done = BWProtossMidAirOneBasePureDropVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidAir_ExpansionVoidray)         { done = BWProtossMidAirExpansionVoidrayVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidAir_ExpansionCapitalAir)      { done = BWProtossMidAirExpansionCapitalAirVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidAir_ExpansionDropAir)         { done = BWProtossMidAirExpansionDropAirVyHd (player); }
    else if (buildIndex == e_BWhdBuildIndex_PMidAir_Macro)                    { done = BWProtossMidAirMacroVyHd (player); }
    else { ErrorMeleeScript(player, "Invalid Mid BuildIndex BWProtossChVi"); }

    if (done) {
        BWProtossHDInitLate(player); // Transition to LateGame
    }
}

//--------------------------------------------------------------------------------------------------
//  BWProtossLateChVi
//--------------------------------------------------------------------------------------------------
void BWProtossLateChVi (int player) {
    BWProtossLateVyHd(player);
}
