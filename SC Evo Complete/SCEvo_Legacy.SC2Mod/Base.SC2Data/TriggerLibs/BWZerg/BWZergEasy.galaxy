//==================================================================================================
//  BWZerg Easy Skirmish AI
//  This is a generated file. Do not edit directly.
//==================================================================================================

//--------------------------------------------------------------------------------------------------
//  BWZergUpgradesEasy
//--------------------------------------------------------------------------------------------------
void BWZergUpgradesEasy (int player, int phase) {
    int buildType;

    if (phase < c_ldPhaseLate) {
        buildType = AIGetUserInt(player, c_openingBuildType);
    } else {
        buildType = AIGetUserInt(player, c_lateGameBuildType);
    }

    if (buildType != e_buildType_Air) {


        if (phase >= c_ldPhaseMid) {


            if (phase >= c_ldPhaseLate) {

                AISetStock( player, 1, c_BWZR_ZergMeleeAttacksSCBW_Lvl1 );
                AISetStock( player, 1, c_BWZR_ZergGroundCarapaceSCBW_Lvl1 );
                AISetStock( player, 1, c_BWZR_ZergMissileAttacksSCBW_Lvl1 );

                if (phase >= c_ldPhaseFinal) {

                    AISetStock( player, 1, c_BWZR_ZergMeleeAttacksSCBW_Lvl2 );
                    AISetStock( player, 1, c_BWZR_ZergGroundCarapaceSCBW_Lvl2 );
                    AISetStock( player, 1, c_BWZR_ZergMissileAttacksSCBW_Lvl2 );
                    AISetStock( player, 1, c_BWZR_ZergFlyerAttacksSCBW_Lvl1 );
                    AISetStock( player, 1, c_BWZR_ZergFlyerCarapaceSCBW_Lvl1 );

                }
            }
        }
    }
    else {  // (buildType == e_buildType_Air) 


        if (phase >= c_ldPhaseMid) {


            if (phase >= c_ldPhaseLate) {

                AISetStock( player, 1, c_BWZR_ZergFlyerAttacksSCBW_Lvl1 );
                AISetStock( player, 1, c_BWZR_ZergFlyerCarapaceSCBW_Lvl1 );

                if (phase >= c_ldPhaseFinal) {

                    AISetStock( player, 1, c_BWZR_ZergFlyerAttacksSCBW_Lvl2 );
                    AISetStock( player, 1, c_BWZR_ZergFlyerCarapaceSCBW_Lvl2 );
                    AISetStock( player, 1, c_BWZR_ZergMissileAttacksSCBW_Lvl1 );
                    AISetStock( player, 1, c_BWZR_ZergGroundCarapaceSCBW_Lvl1 );
                    AISetStock( player, 1, c_BWZR_ZergMeleeAttacksSCBW_Lvl1 );

                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  BWZergOpenArmyInitEasy
//--------------------------------------------------------------------------------------------------
int BWZergOpenArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        // next attack should be around 5 foodCost and 300 resCost after about 375 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 12);
            // validation: 12 units above with average cost 6 food and 300 resources
            duration = 393 + RandomInt(-13, 19);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 3);
            // validation: 3 units above with average cost 6 food and 300 resources
            duration = 393 + RandomInt(-13, 19);
        }
    }
    else if (buildType == e_buildType_Timing) {
        // next attack should be around 7 foodCost and 400 resCost after about 431 seconds
        armyRoll = RandomInt(1,6);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 16);
            // validation: 16 units above with average cost 8 food and 400 resources
            duration = 446 + RandomInt(-14, 22);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 4);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 3);
            // validation: 7 units above with average cost 8 food and 400 resources
            duration = 446 + RandomInt(-14, 22);
        }
        else if (armyRoll <= 6) {
            AIAddToStockArmy(player, c_BWZB_HydraliskDen, 1);
            AIAddToStockArmy(player, c_BWZU_Zergling, 4);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            // validation: 7 units above with average cost 7 food and 400 resources
            duration = 431 + RandomInt(-14, 21);
        }
    }
    else if (buildType == e_buildType_Power) {
        // next attack should be around 9 foodCost and 540 resCost after about 543 seconds
        armyRoll = RandomInt(1,7);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 12);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 14 units above with average cost 10 food and 500 resources
            duration = 542 + RandomInt(-18, 27);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 5);
            // validation: 7 units above with average cost 11 food and 550 resources
            duration = 577 + RandomInt(-19, 28);
        }
        else if (armyRoll <= 6) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 5 units above with average cost 9 food and 550 resources
            duration = 547 + RandomInt(-18, 27);
        }
        else if (armyRoll <= 7) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 6 units above with average cost 9 food and 550 resources
            duration = 547 + RandomInt(-18, 27);
        }
    }
    else if (buildType == e_buildType_Macro) {
        // next attack should be around 5 foodCost and 300 resCost after about 225 seconds
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 12);
            // validation: 12 units above with average cost 6 food and 300 resources
            duration = 236 + RandomInt(-7, 11);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 4);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 6 units above with average cost 6 food and 300 resources
            duration = 236 + RandomInt(-7, 11);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 6 foodCost and 600 resCost after about 581 seconds
        AIAddToStockArmy(player, c_BWZU_Zergling, 1);
        AIAddToStockArmy(player, c_BWZU_Mutalisk, 3);
        // validation: 4 units above with average cost 7 food and 625 resources
        duration = 615 + RandomInt(-20, 30);
    }
    else {
        return BWZergOpenArmyInitEasy(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  BWZergOpenInitEasy
//--------------------------------------------------------------------------------------------------
void BWZergOpenInitEasy (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseOpen, BWZergOpenArmyInitEasy);

    AISetMainState(player, e_mainState_Open, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  BWZergOpenBuildEasy
//--------------------------------------------------------------------------------------------------
void BWZergOpenBuildEasy (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Open, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    if (buildType == e_buildType_Rush) {
        AISetStock( player, 1, c_BWZB_Hatchery_Alias );
        AISetStock( player, 6, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZU_Overlord );
        AISetStock( player, 13, c_BWZU_Drone );
        AISetStock( player, 2, c_BWZU_Overlord );
        AISetStock( player, 16, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZB_SpawningPool );
        AISetStock( player, 1, c_BWZB_CreepColony );
        AISetStock( player, 1, c_BWZB_Extractor );
        AISetStock( player, 3, c_BWZU_Overlord );
        AISetStock( player, 1, c_BWZB_SunkenColony );
        AISetStock( player, 4, c_BWZU_Zergling );
        AISetStock( player, 1, c_BWZB_HydraliskDen );
        AISetStockFarms( player, c_BWZU_Overlord, c_stockNormalFarms);
    }
    else if (buildType == e_buildType_Timing) {
        AISetStock( player, 1, c_BWZB_Hatchery_Alias );
        AISetStock( player, 6, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZU_Overlord );
        AISetStock( player, 13, c_BWZU_Drone );
        AISetStock( player, 2, c_BWZU_Overlord );
        AISetStock( player, 16, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZB_SpawningPool );
        AISetStock( player, 1, c_BWZB_CreepColony );
        AISetStock( player, 1, c_BWZB_Extractor );
        AISetStock( player, 3, c_BWZU_Overlord );
        AISetStock( player, 1, c_BWZB_SunkenColony );
        AISetStock( player, 4, c_BWZU_Zergling );
        AISetStock( player, 1, c_BWZB_HydraliskDen );
        AISetStockFarms( player, c_BWZU_Overlord, c_stockNormalFarms);
        AISetStock( player, 2, c_BWZB_Extractor );
    }
    else if (buildType == e_buildType_Power) {
        AISetStock( player, 1, c_BWZB_Hatchery_Alias );
        AISetStock( player, 6, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZU_Overlord );
        AISetStock( player, 13, c_BWZU_Drone );
        AISetStock( player, 2, c_BWZU_Overlord );
        AISetStock( player, 16, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZB_SpawningPool );
        AISetStock( player, 1, c_BWZB_CreepColony );
        AISetStock( player, 1, c_BWZB_Extractor );
        AISetStock( player, 3, c_BWZU_Overlord );
        AISetStock( player, 2, c_BWZB_SunkenColony );
        AISetStock( player, 4, c_BWZU_Zergling );
        AISetStock( player, 1, c_BWZB_HydraliskDen );
        AISetStockFarms( player, c_BWZU_Overlord, c_stockNormalFarms);
        AISetStock( player, 2, c_BWZB_Extractor );
    }
    else if (buildType == e_buildType_Macro) {
        AISetStock( player, 1, c_BWZB_Hatchery_Alias );
        AISetStock( player, 6, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZU_Overlord );
        AISetStock( player, 13, c_BWZU_Drone );
        AISetStock( player, 2, c_BWZU_Overlord );
        AISetStock( player, 16, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZB_CreepColony );
        if (BWZergMacroExpand(player)) { return; }
        AISetStock( player, 1, c_BWZB_SpawningPool );
        AISetStock( player, 1, c_BWZB_SunkenColony );
        AISetStock( player, 1, c_BWZB_Extractor );
        AISetStock( player, 3, c_BWZU_Overlord );
        AISetStock( player, 4, c_BWZU_Zergling );
        AISetStock( player, 1, c_BWZB_HydraliskDen );
        AISetStockFarms( player, c_BWZU_Overlord, c_stockNormalFarms);
        AISetStock( player, 2, c_BWZB_Extractor );
    }
    else if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_BWZB_Hatchery_Alias );
        AISetStock( player, 6, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZU_Overlord );
        AISetStock( player, 13, c_BWZU_Drone );
        AISetStock( player, 2, c_BWZU_Overlord );
        AISetStock( player, 16, c_BWZU_Drone );
        AISetStock( player, 1, c_BWZB_CreepColony );
        if (BWZergMacroExpand(player)) { return; }
        AISetStock( player, 1, c_BWZB_SpawningPool );
        AISetStock( player, 2, c_BWZB_Extractor );
        AISetStock( player, 3, c_BWZU_Overlord );
        AISetStock( player, 1, c_BWZB_SunkenColony );
        AISetStock( player, 1, c_BWZB_Lair );
        AISetStock( player, 4, c_BWZU_Overlord );
        AISetStock( player, 1, c_BWZB_Spire_Alias );
        AISetStockFarms( player, c_BWZU_Overlord, c_stockNormalFarms );
        AISetStockUnitNext( player, 22, c_BWZU_Drone, c_stockIdle );
    }

    BWZergBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    BWZergGeneralBuild(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 0.70);

    BWZergUpgradesEasy(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 22, c_BWZU_Drone);

    BWZergTechUp(player, c_ldPhaseOpen);

    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_BWZR_OverlordSCBWSpeedUpgrade );
        AISetStock( player, 1, c_BWZR_OverlordSCBWTransportResearch );
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Mid, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  BWZergMidArmyInitEasy
//--------------------------------------------------------------------------------------------------
int BWZergMidArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        // next attack should be around 10 foodCost and 600 resCost after about 340 seconds
        armyRoll = RandomInt(1,7);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 8);
            AIAddToStockArmy(player, c_BWZU_Mutalisk, 2);
            // validation: 10 units above with average cost 8 food and 600 resources
            duration = 323 + RandomInt(-10, 16);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 3);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 7 units above with average cost 11 food and 650 resources
            duration = 360 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 6) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            // validation: 6 units above with average cost 10 food and 600 resources
            duration = 340 + RandomInt(-11, 17);
        }
        else if (armyRoll <= 7) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Queen, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            // validation: 6 units above with average cost 9 food and 650 resources
            duration = 343 + RandomInt(-11, 17);
        }
    }
    else if (buildType == e_buildType_Timing) {
        // next attack should be around 13 foodCost and 760 resCost after about 380 seconds
        armyRoll = RandomInt(1,7);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 8);
            AIAddToStockArmy(player, c_BWZU_Mutalisk, 3);
            // validation: 11 units above with average cost 10 food and 800 resources
            duration = 367 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 4);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 8 units above with average cost 13 food and 750 resources
            duration = 378 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 6) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 7 units above with average cost 12 food and 750 resources
            duration = 371 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 7) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 3);
            AIAddToStockArmy(player, c_BWZU_Queen, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            // validation: 7 units above with average cost 11 food and 750 resources
            duration = 364 + RandomInt(-12, 18);
        }
    }
    else if (buildType == e_buildType_Power) {
        // next attack should be around 13 foodCost and 790 resCost after about 400 seconds
        armyRoll = RandomInt(1,7);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 6);
            AIAddToStockArmy(player, c_BWZU_Mutalisk, 4);
            // validation: 10 units above with average cost 11 food and 950 resources
            duration = 418 + RandomInt(-13, 20);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 5);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 9 units above with average cost 15 food and 850 resources
            duration = 428 + RandomInt(-14, 21);
        }
        else if (armyRoll <= 6) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 7 units above with average cost 13 food and 850 resources
            duration = 412 + RandomInt(-13, 20);
        }
        else if (armyRoll <= 7) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 4);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Queen, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 9 units above with average cost 12 food and 850 resources
            duration = 404 + RandomInt(-13, 20);
        }
    }
    else if (buildType == e_buildType_Macro) {
        // next attack should be around 18 foodCost and 1080 resCost after about 581 seconds
        // note: mid macro build did not send opening attack at 225 time
        armyRoll = RandomInt(1,7);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 14);
            AIAddToStockArmy(player, c_BWZU_Mutalisk, 4);
            // validation: 18 units above with average cost 15 food and 1150 resources
            duration = 570 + RandomInt(-26, 39);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 6);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 3);
            // validation: 11 units above with average cost 19 food and 1100 resources
            duration = 598 + RandomInt(-27, 41);
        }
        else if (armyRoll <= 6) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 3);
            // validation: 9 units above with average cost 17 food and 1100 resources
            duration = 577 + RandomInt(-26, 40);
        }
        else if (armyRoll <= 7) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 5);
            AIAddToStockArmy(player, c_BWZU_Queen, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 3);
            // validation: 11 units above with average cost 19 food and 1250 resources
            duration = 645 + RandomInt(-29, 43);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 9 foodCost and 900 resCost after about 380 seconds
        AIAddToStockArmy(player, c_BWZU_Mutalisk, 5);
        // validation: 5 units above with average cost 10 food and 1000 resources
        duration = 408 + RandomInt(-13, 20);
    }
    else {
        return BWZergMidArmyInitEasy(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  BWZergMidInitEasy
//--------------------------------------------------------------------------------------------------
void BWZergMidInitEasy (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseMid, BWZergMidArmyInitEasy);

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Mid, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  BWZergMidBuildEasy
//--------------------------------------------------------------------------------------------------
void BWZergMidBuildEasy (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Mid, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    BWZergBasicEconomy(player, c_ldPhaseMid, 16);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_BWZR_OverlordSCBWSpeedUpgrade );
        AISetStock( player, 1, c_BWZR_OverlordSCBWTransportResearch );
    }
    BWZergBasicExpansion(player, c_ldPhaseMid, 5500, 1500);

    BWZergBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    BWZergGeneralBuild(player, c_ldPhaseMid);

    AILDStockWorkers( player, 22, c_BWZU_Drone);

    if (buildType == e_buildType_Rush) {
    }
    else if (buildType == e_buildType_Timing) {
    }
    else if (buildType == e_buildType_Power) {
        if (BWZergMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Macro) {
        if (BWZergMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Air) {
        if (BWZergMacroExpand(player)) { return; }
    }

    if (AINeedsDetection(player)) {
        AIAddToStockArmy(player, c_BWZU_Overlord, 1);
    }

    AISetStockArmyScale(player, 0.70);

    AILDStockWorkers( player, 50, c_BWZU_Drone);

    BWZergUpgradesEasy(player, c_ldPhaseMid);

    AISetStockArmyScale(player, 1.00);

    AIAddToStockArmy(player, c_BWZU_Overlord, 2);

    BWZergTechUp(player, c_ldPhaseMid);

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  BWZergLateArmyInitEasy
//--------------------------------------------------------------------------------------------------
int BWZergLateArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        // next attack should be around 17 foodCost and 1000 resCost after about 320 seconds
        armyRoll = RandomInt(1,9);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 14);
            AIAddToStockArmy(player, c_BWZU_Mutalisk, 4);
            // validation: 18 units above with average cost 15 food and 1150 resources
            duration = 330 + RandomInt(-11, 16);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 5);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 3);
            // validation: 10 units above with average cost 17 food and 1000 resources
            duration = 320 + RandomInt(-10, 16);
        }
        else if (armyRoll <= 7) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 3);
            // validation: 8 units above with average cost 15 food and 1000 resources
            duration = 311 + RandomInt(-10, 15);
        }
        else if (armyRoll <= 9) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 4);
            AIAddToStockArmy(player, c_BWZU_Queen, 1);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 9 units above with average cost 15 food and 1000 resources
            duration = 311 + RandomInt(-10, 15);
        }
    }
    else if (buildType == e_buildType_HighTech) {
        // next attack should be around 19 foodCost and 1100 resCost after about 340 seconds
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Ultralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 6 units above with average cost 17 food and 1350 resources
            duration = 363 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Guardian, 2);
            AIAddToStockArmy(player, c_BWZU_Devourer, 1);
            // validation: 5 units above with average cost 11 food and 1400 resources
            duration = 342 + RandomInt(-11, 17);
        }
    }
    else if (buildType == e_buildType_Special) {
        // next attack should be around 20 foodCost and 1200 resCost after about 360 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 4);
            AIAddToStockArmy(player, c_BWZU_Queen, 4);
            // validation: 10 units above with average cost 17 food and 1450 resources
            duration = 377 + RandomInt(-12, 18);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Queen, 4);
            AIAddToStockArmy(player, c_BWZU_Defiler, 1);
            // validation: 9 units above with average cost 16 food and 1550 resources
            duration = 385 + RandomInt(-12, 19);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        // next attack should be around 22 foodCost and 1300 resCost after about 380 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 6);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 4);
            AIAddToStockArmy(player, c_BWZU_Queen, 1);
            // validation: 13 units above with average cost 23 food and 1500 resources
            duration = 408 + RandomInt(-13, 20);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 6);
            AIAddToStockArmy(player, c_BWZU_Queen, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_BWZU_Guardian, c_BWZU_Ultralisk), 1);
            // validation: 10 units above with average cost 20 food and 1425 resources
            duration = 386 + RandomInt(-12, 19);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 13 foodCost and 1300 resCost after about 340 seconds
        AIAddToStockArmy(player, c_BWZU_Mutalisk, 7);
        // validation: 7 units above with average cost 14 food and 1400 resources
        duration = 357 + RandomInt(-11, 17);
    }
    else {
        return BWZergLateArmyInitEasy(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  BWZergFinalArmyInitEasy
//--------------------------------------------------------------------------------------------------
int BWZergFinalArmyInitEasy (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        // next attack should be around 27 foodCost and 1600 resCost after about 290 seconds
        armyRoll = RandomInt(1,9);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 20);
            AIAddToStockArmy(player, c_BWZU_Mutalisk, 8);
            // validation: 28 units above with average cost 26 food and 2100 resources
            duration = 325 + RandomInt(-10, 16);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 8);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 4);
            // validation: 14 units above with average cost 25 food and 1450 resources
            duration = 274 + RandomInt(-9, 13);
        }
        else if (armyRoll <= 7) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 5);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 4);
            // validation: 13 units above with average cost 25 food and 1550 resources
            duration = 281 + RandomInt(-9, 14);
        }
        else if (armyRoll <= 9) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 6);
            AIAddToStockArmy(player, c_BWZU_Queen, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 4);
            // validation: 14 units above with average cost 25 food and 1750 resources
            duration = 295 + RandomInt(-9, 14);
        }
    }
    else if (buildType == e_buildType_HighTech) {
        // next attack should be around 29 foodCost and 1700 resCost after about 310 seconds
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Ultralisk, 3);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 2);
            // validation: 7 units above with average cost 23 food and 1850 resources
            duration = 306 + RandomInt(-10, 15);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Guardian, 3);
            AIAddToStockArmy(player, c_BWZU_Devourer, 2);
            // validation: 7 units above with average cost 17 food and 2200 resources
            duration = 315 + RandomInt(-10, 15);
        }
    }
    else if (buildType == e_buildType_Special) {
        // next attack should be around 30 foodCost and 1800 resCost after about 330 seconds
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 6);
            AIAddToStockArmy(player, c_BWZU_Queen, 6);
            // validation: 14 units above with average cost 25 food and 2150 resources
            duration = 342 + RandomInt(-11, 17);
        }
        else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 4);
            AIAddToStockArmy(player, c_BWZU_Queen, 5);
            AIAddToStockArmy(player, c_BWZU_Defiler, 1);
            // validation: 12 units above with average cost 22 food and 2000 resources
            duration = 324 + RandomInt(-10, 16);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        // next attack should be around 32 foodCost and 1900 resCost after about 330 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 6);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 4);
            AIAddToStockArmy(player, c_BWZU_Queen, 1);
            AIAddToStockArmy(player, AIPickFrom2(c_BWZU_Guardian, c_BWZU_Ultralisk), 1);
            // validation: 14 units above with average cost 28 food and 2025 resources
            duration = 329 + RandomInt(-10, 16);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_BWZU_Zergling, 2);
            AIAddToStockArmy(player, c_BWZU_Hydralisk, 6);
            AIAddToStockArmy(player, c_BWZU_Queen, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_BWZU_Guardian, c_BWZU_Ultralisk), 2);
            // validation: 12 units above with average cost 27 food and 2200 resources
            duration = 338 + RandomInt(-11, 16);
        }
    }
    else if (buildType == e_buildType_Air) {
        // next attack should be around 18 foodCost and 1800 resCost after about 310 seconds
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_BWZU_Mutalisk, 8);
            AIAddToStockArmy(player, c_BWZU_Devourer, 2);
            // validation: 10 units above with average cost 20 food and 2100 resources
            duration = 340 + RandomInt(-11, 17);
        }
        else if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_BWZU_Mutalisk, 2);
            AIAddToStockArmy(player, c_BWZU_Devourer, 2);
            AIAddToStockArmy(player, c_BWZU_Guardian, 2);
            // validation: 6 units above with average cost 16 food and 2000 resources
            duration = 315 + RandomInt(-10, 15);
        }
    }
    else {
        return BWZergFinalArmyInitEasy(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  BWZergLateInitEasy
//--------------------------------------------------------------------------------------------------
void BWZergLateInitEasy (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int curPhase = c_ldPhaseLate;
    int buildType = 0;

    AIChooseNextLateGameBuild(player);
    buildType = AIGetUserInt(player, c_lateGameBuildType);

    if (lateLoop <= 0) { // First Late Loop
        AISetupNextArmy (player, buildType, curPhase, BWZergLateArmyInitEasy);
    } else {
        curPhase = c_ldPhaseFinal + lateLoop;
        AISetupNextArmy (player, buildType, curPhase, BWZergFinalArmyInitEasy);
    }

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Late, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  BWZergLateBuildEasy
//--------------------------------------------------------------------------------------------------
void BWZergLateBuildEasy (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int buildType = AIGetUserInt(player, c_lateGameBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentLateGame(player)) {
        AISetMainState(player, e_mainState_Late, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    BWZergBasicEconomy(player, c_ldPhaseLate, 16);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_BWZR_OverlordSCBWSpeedUpgrade );
        AISetStock( player, 1, c_BWZR_OverlordSCBWTransportResearch );
    }
    BWZergBasicExpansion(player, c_ldPhaseLate, 8000, 2000);

    BWZergBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    BWZergGeneralBuild(player, c_ldPhaseLate);

    AILDStockWorkers( player, 22, c_BWZU_Drone);

    if (buildType == e_buildType_Core) {
        if (BWZergMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_HighTech) {
        if (BWZergMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Special) {
        if (BWZergMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Mixed) {
        if (BWZergMacroExpand(player)) { return; }
    }
    else if (buildType == e_buildType_Air) {
        if (BWZergMacroExpand(player)) { return; }
    }

    AIAddToStockArmy(player, c_BWZU_Overlord, 2);

    AISetStockArmyScale(player, 0.70);

    AISetStock( player, 1, c_BWZR_OverlordSCBWSpeedUpgrade );
    AISetStock( player, 2, c_BWZR_OverlordSCBWTransportResearch );
    AIAddToStockArmy(player, c_BWZU_Overlord, 3);

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 50, c_BWZU_Drone);

    if (lateLoop <= 0) { // First Late Loop
        BWZergUpgradesEasy(player, c_ldPhaseLate);
        BWZergTechUp(player, c_ldPhaseLate);
    } else { // Remaining Loops
        BWZergUpgradesEasy(player, c_ldPhaseFinal);
        BWZergTechUp(player, c_ldPhaseFinal);
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
    if (nextState) {
        lateLoop += 1;
        AISetUserInt(player, c_ldNumLateLoops, lateLoop);
    }
}

//--------------------------------------------------------------------------------------------------
//  BWZergOpenEasy
//--------------------------------------------------------------------------------------------------
void BWZergOpenEasy (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        BWZergOpenInitEasy(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { BWZergOpenBuildEasy(player); }
    else { ErrorMeleeScript(player, "Invalid Open MainSubState BWZergEasy"); }
}

//--------------------------------------------------------------------------------------------------
//  BWZergMidEasy
//--------------------------------------------------------------------------------------------------
void BWZergMidEasy (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        BWZergMidInitEasy(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { BWZergMidBuildEasy(player);  }
    else { ErrorMeleeScript(player, "Invalid Mid MainSubState BWZergEasy"); }
}

//--------------------------------------------------------------------------------------------------
//  BWZergLateEasy
//--------------------------------------------------------------------------------------------------
void BWZergLateEasy (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        BWZergLateInitEasy(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { BWZergLateBuildEasy(player);  }
    else { ErrorMeleeScript(player, "Invalid Late MainSubState BWZergEasy"); }
}

